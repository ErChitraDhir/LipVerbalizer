{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ErChitraDhir/demo-repo/blob/main/Lip_Verbalizer_shiva.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hy_pDaHaPdiU"
      },
      "source": [
        "0. Install and import Dependencies:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cuDTiqWjP-UL",
        "outputId": "dae5faa5-4e51-4b49-ba23-7ade3c8ccc6b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Package                          Version\n",
            "-------------------------------- ---------------------\n",
            "absl-py                          1.4.0\n",
            "aiohttp                          3.8.6\n",
            "aiosignal                        1.3.1\n",
            "alabaster                        0.7.13\n",
            "albumentations                   1.3.1\n",
            "altair                           4.2.2\n",
            "anyio                            3.7.1\n",
            "appdirs                          1.4.4\n",
            "argon2-cffi                      23.1.0\n",
            "argon2-cffi-bindings             21.2.0\n",
            "array-record                     0.5.0\n",
            "arviz                            0.15.1\n",
            "astropy                          5.3.4\n",
            "astunparse                       1.6.3\n",
            "async-timeout                    4.0.3\n",
            "atpublic                         4.0\n",
            "attrs                            23.1.0\n",
            "audioread                        3.0.1\n",
            "autograd                         1.6.2\n",
            "Babel                            2.13.1\n",
            "backcall                         0.2.0\n",
            "beautifulsoup4                   4.11.2\n",
            "bidict                           0.22.1\n",
            "bigframes                        0.13.0\n",
            "bleach                           6.1.0\n",
            "blinker                          1.4\n",
            "blis                             0.7.11\n",
            "blosc2                           2.0.0\n",
            "bokeh                            3.3.1\n",
            "bqplot                           0.12.42\n",
            "branca                           0.7.0\n",
            "build                            1.0.3\n",
            "CacheControl                     0.13.1\n",
            "cachetools                       5.3.2\n",
            "catalogue                        2.0.10\n",
            "certifi                          2023.7.22\n",
            "cffi                             1.16.0\n",
            "chardet                          5.2.0\n",
            "charset-normalizer               3.3.2\n",
            "chex                             0.1.7\n",
            "click                            8.1.7\n",
            "click-plugins                    1.1.1\n",
            "cligj                            0.7.2\n",
            "cloudpickle                      2.2.1\n",
            "cmake                            3.27.7\n",
            "cmdstanpy                        1.2.0\n",
            "colorcet                         3.0.1\n",
            "colorlover                       0.3.0\n",
            "colour                           0.1.5\n",
            "community                        1.0.0b1\n",
            "confection                       0.1.3\n",
            "cons                             0.4.6\n",
            "contextlib2                      21.6.0\n",
            "contourpy                        1.2.0\n",
            "cryptography                     41.0.5\n",
            "cufflinks                        0.17.3\n",
            "cupy-cuda11x                     11.0.0\n",
            "cvxopt                           1.3.2\n",
            "cvxpy                            1.3.2\n",
            "cycler                           0.12.1\n",
            "cymem                            2.0.8\n",
            "Cython                           3.0.5\n",
            "dask                             2023.8.1\n",
            "datascience                      0.17.6\n",
            "db-dtypes                        1.1.1\n",
            "dbus-python                      1.2.18\n",
            "debugpy                          1.6.6\n",
            "decorator                        4.4.2\n",
            "defusedxml                       0.7.1\n",
            "diskcache                        5.6.3\n",
            "distributed                      2023.8.1\n",
            "distro                           1.7.0\n",
            "dlib                             19.24.2\n",
            "dm-tree                          0.1.8\n",
            "docutils                         0.18.1\n",
            "dopamine-rl                      4.0.6\n",
            "duckdb                           0.9.2\n",
            "earthengine-api                  0.1.379\n",
            "easydict                         1.11\n",
            "ecos                             2.0.12\n",
            "editdistance                     0.6.2\n",
            "eerepr                           0.0.4\n",
            "en-core-web-sm                   3.6.0\n",
            "entrypoints                      0.4\n",
            "et-xmlfile                       1.1.0\n",
            "etils                            1.5.2\n",
            "etuples                          0.3.9\n",
            "exceptiongroup                   1.1.3\n",
            "fastai                           2.7.13\n",
            "fastcore                         1.5.29\n",
            "fastdownload                     0.0.7\n",
            "fastjsonschema                   2.19.0\n",
            "fastprogress                     1.0.3\n",
            "fastrlock                        0.8.2\n",
            "filelock                         3.13.1\n",
            "fiona                            1.9.5\n",
            "firebase-admin                   5.3.0\n",
            "Flask                            2.2.5\n",
            "flatbuffers                      23.5.26\n",
            "flax                             0.7.5\n",
            "folium                           0.14.0\n",
            "fonttools                        4.44.3\n",
            "frozendict                       2.3.8\n",
            "frozenlist                       1.4.0\n",
            "fsspec                           2023.6.0\n",
            "future                           0.18.3\n",
            "gast                             0.5.4\n",
            "gcsfs                            2023.6.0\n",
            "GDAL                             3.4.3\n",
            "gdown                            4.6.6\n",
            "geemap                           0.28.2\n",
            "gensim                           4.3.2\n",
            "geocoder                         1.38.1\n",
            "geographiclib                    2.0\n",
            "geopandas                        0.13.2\n",
            "geopy                            2.3.0\n",
            "gin-config                       0.5.0\n",
            "glob2                            0.7\n",
            "google                           2.0.3\n",
            "google-api-core                  2.11.1\n",
            "google-api-python-client         2.84.0\n",
            "google-auth                      2.17.3\n",
            "google-auth-httplib2             0.1.1\n",
            "google-auth-oauthlib             1.0.0\n",
            "google-cloud-bigquery            3.12.0\n",
            "google-cloud-bigquery-connection 1.12.1\n",
            "google-cloud-bigquery-storage    2.22.0\n",
            "google-cloud-core                2.3.3\n",
            "google-cloud-datastore           2.15.2\n",
            "google-cloud-firestore           2.11.1\n",
            "google-cloud-functions           1.13.3\n",
            "google-cloud-iam                 2.12.2\n",
            "google-cloud-language            2.9.1\n",
            "google-cloud-resource-manager    1.10.4\n",
            "google-cloud-storage             2.8.0\n",
            "google-cloud-translate           3.11.3\n",
            "google-colab                     1.0.0\n",
            "google-crc32c                    1.5.0\n",
            "google-pasta                     0.2.0\n",
            "google-resumable-media           2.6.0\n",
            "googleapis-common-protos         1.61.0\n",
            "googledrivedownloader            0.4\n",
            "graphviz                         0.20.1\n",
            "greenlet                         3.0.1\n",
            "grpc-google-iam-v1               0.12.7\n",
            "grpcio                           1.59.2\n",
            "grpcio-status                    1.48.2\n",
            "gspread                          3.4.2\n",
            "gspread-dataframe                3.3.1\n",
            "gym                              0.25.2\n",
            "gym-notices                      0.0.8\n",
            "h5netcdf                         1.3.0\n",
            "h5py                             3.9.0\n",
            "holidays                         0.36\n",
            "holoviews                        1.17.1\n",
            "html5lib                         1.1\n",
            "httpimport                       1.3.1\n",
            "httplib2                         0.22.0\n",
            "huggingface-hub                  0.19.3\n",
            "humanize                         4.7.0\n",
            "hyperopt                         0.2.7\n",
            "ibis-framework                   6.2.0\n",
            "idna                             3.4\n",
            "imageio                          2.31.6\n",
            "imageio-ffmpeg                   0.4.9\n",
            "imagesize                        1.4.1\n",
            "imbalanced-learn                 0.10.1\n",
            "imgaug                           0.4.0\n",
            "importlib-metadata               6.8.0\n",
            "importlib-resources              6.1.1\n",
            "imutils                          0.5.4\n",
            "inflect                          7.0.0\n",
            "iniconfig                        2.0.0\n",
            "install                          1.3.5\n",
            "intel-openmp                     2023.2.0\n",
            "ipyevents                        2.0.2\n",
            "ipyfilechooser                   0.6.0\n",
            "ipykernel                        5.5.6\n",
            "ipyleaflet                       0.17.4\n",
            "ipython                          7.34.0\n",
            "ipython-genutils                 0.2.0\n",
            "ipython-sql                      0.5.0\n",
            "ipytree                          0.2.2\n",
            "ipywidgets                       7.7.1\n",
            "itsdangerous                     2.1.2\n",
            "jax                              0.4.20\n",
            "jaxlib                           0.4.20+cuda11.cudnn86\n",
            "jeepney                          0.7.1\n",
            "jieba                            0.42.1\n",
            "Jinja2                           3.1.2\n",
            "joblib                           1.3.2\n",
            "jsonpickle                       3.0.2\n",
            "jsonschema                       4.19.2\n",
            "jsonschema-specifications        2023.11.1\n",
            "jupyter-client                   6.1.12\n",
            "jupyter-console                  6.1.0\n",
            "jupyter_core                     5.5.0\n",
            "jupyter-server                   1.24.0\n",
            "jupyterlab-pygments              0.2.2\n",
            "jupyterlab-widgets               3.0.9\n",
            "kaggle                           1.5.16\n",
            "keras                            2.14.0\n",
            "keyring                          23.5.0\n",
            "kiwisolver                       1.4.5\n",
            "langcodes                        3.3.0\n",
            "launchpadlib                     1.10.16\n",
            "lazr.restfulclient               0.14.4\n",
            "lazr.uri                         1.0.6\n",
            "lazy_loader                      0.3\n",
            "libclang                         16.0.6\n",
            "librosa                          0.10.1\n",
            "lida                             0.0.10\n",
            "lightgbm                         4.1.0\n",
            "linkify-it-py                    2.0.2\n",
            "llmx                             0.0.15a0\n",
            "llvmlite                         0.41.1\n",
            "locket                           1.0.0\n",
            "logical-unification              0.4.6\n",
            "lxml                             4.9.3\n",
            "malloy                           2023.1064\n",
            "Markdown                         3.5.1\n",
            "markdown-it-py                   3.0.0\n",
            "MarkupSafe                       2.1.3\n",
            "matplotlib                       3.7.1\n",
            "matplotlib-inline                0.1.6\n",
            "matplotlib-venn                  0.11.9\n",
            "mdit-py-plugins                  0.4.0\n",
            "mdurl                            0.1.2\n",
            "miniKanren                       1.0.3\n",
            "missingno                        0.5.2\n",
            "mistune                          0.8.4\n",
            "mizani                           0.9.3\n",
            "mkl                              2023.2.0\n",
            "ml-dtypes                        0.2.0\n",
            "mlxtend                          0.22.0\n",
            "more-itertools                   10.1.0\n",
            "moviepy                          1.0.3\n",
            "mpmath                           1.3.0\n",
            "msgpack                          1.0.7\n",
            "multidict                        6.0.4\n",
            "multipledispatch                 1.0.0\n",
            "multitasking                     0.0.11\n",
            "murmurhash                       1.0.10\n",
            "music21                          9.1.0\n",
            "natsort                          8.4.0\n",
            "nbclassic                        1.0.0\n",
            "nbclient                         0.9.0\n",
            "nbconvert                        6.5.4\n",
            "nbformat                         5.9.2\n",
            "nest-asyncio                     1.5.8\n",
            "networkx                         3.2.1\n",
            "nibabel                          4.0.2\n",
            "nltk                             3.8.1\n",
            "notebook                         6.5.5\n",
            "notebook_shim                    0.2.3\n",
            "numba                            0.58.1\n",
            "numexpr                          2.8.7\n",
            "numpy                            1.23.5\n",
            "oauth2client                     4.1.3\n",
            "oauthlib                         3.2.2\n",
            "opencv-contrib-python            4.8.0.76\n",
            "opencv-python                    4.8.0.76\n",
            "opencv-python-headless           4.8.1.78\n",
            "openpyxl                         3.1.2\n",
            "opt-einsum                       3.3.0\n",
            "optax                            0.1.7\n",
            "orbax-checkpoint                 0.4.2\n",
            "osqp                             0.6.2.post8\n",
            "packaging                        23.2\n",
            "pandas                           1.5.3\n",
            "pandas-datareader                0.10.0\n",
            "pandas-gbq                       0.17.9\n",
            "pandas-stubs                     1.5.3.230304\n",
            "pandocfilters                    1.5.0\n",
            "panel                            1.3.1\n",
            "param                            2.0.1\n",
            "parso                            0.8.3\n",
            "parsy                            2.1\n",
            "partd                            1.4.1\n",
            "pathlib                          1.0.1\n",
            "pathy                            0.10.3\n",
            "patsy                            0.5.3\n",
            "peewee                           3.17.0\n",
            "pexpect                          4.8.0\n",
            "pickleshare                      0.7.5\n",
            "Pillow                           9.4.0\n",
            "pip                              23.1.2\n",
            "pip-tools                        6.13.0\n",
            "platformdirs                     4.0.0\n",
            "plotly                           5.15.0\n",
            "plotnine                         0.12.4\n",
            "pluggy                           1.3.0\n",
            "polars                           0.17.3\n",
            "pooch                            1.8.0\n",
            "portpicker                       1.5.2\n",
            "prefetch-generator               1.0.3\n",
            "preshed                          3.0.9\n",
            "prettytable                      3.9.0\n",
            "proglog                          0.1.10\n",
            "progressbar2                     4.2.0\n",
            "prometheus-client                0.18.0\n",
            "promise                          2.3\n",
            "prompt-toolkit                   3.0.41\n",
            "prophet                          1.1.5\n",
            "proto-plus                       1.22.3\n",
            "protobuf                         3.20.3\n",
            "psutil                           5.9.5\n",
            "psycopg2                         2.9.9\n",
            "ptyprocess                       0.7.0\n",
            "py-cpuinfo                       9.0.0\n",
            "py4j                             0.10.9.7\n",
            "pyarrow                          9.0.0\n",
            "pyasn1                           0.5.0\n",
            "pyasn1-modules                   0.3.0\n",
            "pycocotools                      2.0.7\n",
            "pycparser                        2.21\n",
            "pyct                             0.5.0\n",
            "pydantic                         1.10.13\n",
            "pydata-google-auth               1.8.2\n",
            "pydot                            1.4.2\n",
            "pydot-ng                         2.0.0\n",
            "pydotplus                        2.0.2\n",
            "PyDrive                          1.3.1\n",
            "PyDrive2                         1.6.3\n",
            "pyerfa                           2.0.1.1\n",
            "pygame                           2.5.2\n",
            "Pygments                         2.16.1\n",
            "PyGObject                        3.42.1\n",
            "PyJWT                            2.3.0\n",
            "pymc                             5.7.2\n",
            "pymystem3                        0.2.0\n",
            "PyOpenGL                         3.1.7\n",
            "pyOpenSSL                        23.3.0\n",
            "pyparsing                        3.1.1\n",
            "pyperclip                        1.8.2\n",
            "pyproj                           3.6.1\n",
            "pyproject_hooks                  1.0.0\n",
            "pyshp                            2.3.1\n",
            "PySocks                          1.7.1\n",
            "pytensor                         2.14.2\n",
            "pytest                           7.4.3\n",
            "python-apt                       0.0.0\n",
            "python-box                       7.1.1\n",
            "python-dateutil                  2.8.2\n",
            "python-louvain                   0.16\n",
            "python-slugify                   8.0.1\n",
            "python-utils                     3.8.1\n",
            "pytz                             2023.3.post1\n",
            "pyviz_comms                      3.0.0\n",
            "PyWavelets                       1.4.1\n",
            "PyYAML                           6.0.1\n",
            "pyzmq                            23.2.1\n",
            "qdldl                            0.1.7.post0\n",
            "qudida                           0.0.4\n",
            "ratelim                          0.1.6\n",
            "referencing                      0.31.0\n",
            "regex                            2023.6.3\n",
            "requests                         2.31.0\n",
            "requests-oauthlib                1.3.1\n",
            "requirements-parser              0.5.0\n",
            "rich                             13.7.0\n",
            "rpds-py                          0.12.0\n",
            "rpy2                             3.4.2\n",
            "rsa                              4.9\n",
            "safetensors                      0.4.0\n",
            "scikit-image                     0.19.3\n",
            "scikit-learn                     1.2.2\n",
            "scipy                            1.11.3\n",
            "scooby                           0.9.2\n",
            "scs                              3.2.4\n",
            "seaborn                          0.12.2\n",
            "SecretStorage                    3.3.1\n",
            "Send2Trash                       1.8.2\n",
            "setuptools                       67.7.2\n",
            "shapely                          2.0.2\n",
            "six                              1.16.0\n",
            "sklearn-pandas                   2.2.0\n",
            "smart-open                       6.4.0\n",
            "sniffio                          1.3.0\n",
            "snowballstemmer                  2.2.0\n",
            "sortedcontainers                 2.4.0\n",
            "soundfile                        0.12.1\n",
            "soupsieve                        2.5\n",
            "soxr                             0.3.7\n",
            "spacy                            3.6.1\n",
            "spacy-legacy                     3.0.12\n",
            "spacy-loggers                    1.0.5\n",
            "Sphinx                           5.0.2\n",
            "sphinxcontrib-applehelp          1.0.7\n",
            "sphinxcontrib-devhelp            1.0.5\n",
            "sphinxcontrib-htmlhelp           2.0.4\n",
            "sphinxcontrib-jsmath             1.0.1\n",
            "sphinxcontrib-qthelp             1.0.6\n",
            "sphinxcontrib-serializinghtml    1.1.9\n",
            "SQLAlchemy                       2.0.23\n",
            "sqlglot                          17.16.2\n",
            "sqlparse                         0.4.4\n",
            "srsly                            2.4.8\n",
            "stanio                           0.3.0\n",
            "statsmodels                      0.14.0\n",
            "sympy                            1.12\n",
            "tables                           3.8.0\n",
            "tabulate                         0.9.0\n",
            "tbb                              2021.11.0\n",
            "tblib                            3.0.0\n",
            "tenacity                         8.2.3\n",
            "tensorboard                      2.14.1\n",
            "tensorboard-data-server          0.7.2\n",
            "tensorflow                       2.14.0\n",
            "tensorflow-datasets              4.9.3\n",
            "tensorflow-estimator             2.14.0\n",
            "tensorflow-gcs-config            2.14.0\n",
            "tensorflow-hub                   0.15.0\n",
            "tensorflow-io-gcs-filesystem     0.34.0\n",
            "tensorflow-metadata              1.14.0\n",
            "tensorflow-probability           0.22.0\n",
            "tensorstore                      0.1.45\n",
            "termcolor                        2.3.0\n",
            "terminado                        0.18.0\n",
            "text-unidecode                   1.3\n",
            "textblob                         0.17.1\n",
            "tf-slim                          1.1.0\n",
            "thinc                            8.1.12\n",
            "threadpoolctl                    3.2.0\n",
            "tifffile                         2023.9.26\n",
            "tinycss2                         1.2.1\n",
            "tokenizers                       0.15.0\n",
            "toml                             0.10.2\n",
            "tomli                            2.0.1\n",
            "toolz                            0.12.0\n",
            "torch                            2.1.0+cu118\n",
            "torchaudio                       2.1.0+cu118\n",
            "torchdata                        0.7.0\n",
            "torchsummary                     1.5.1\n",
            "torchtext                        0.16.0\n",
            "torchvision                      0.16.0+cu118\n",
            "tornado                          6.3.2\n",
            "tqdm                             4.66.1\n",
            "traitlets                        5.7.1\n",
            "traittypes                       0.2.1\n",
            "transformers                     4.35.2\n",
            "triton                           2.1.0\n",
            "tweepy                           4.14.0\n",
            "typer                            0.9.0\n",
            "types-pytz                       2023.3.1.1\n",
            "types-setuptools                 68.2.0.1\n",
            "typing_extensions                4.5.0\n",
            "tzlocal                          5.2\n",
            "uc-micro-py                      1.0.2\n",
            "uritemplate                      4.1.1\n",
            "urllib3                          2.0.7\n",
            "vega-datasets                    0.9.0\n",
            "wadllib                          1.3.6\n",
            "wasabi                           1.1.2\n",
            "wcwidth                          0.2.10\n",
            "webcolors                        1.13\n",
            "webencodings                     0.5.1\n",
            "websocket-client                 1.6.4\n",
            "Werkzeug                         3.0.1\n",
            "wheel                            0.41.3\n",
            "widgetsnbextension               3.6.6\n",
            "wordcloud                        1.9.2\n",
            "wrapt                            1.14.1\n",
            "xarray                           2023.7.0\n",
            "xarray-einstats                  0.6.0\n",
            "xgboost                          2.0.2\n",
            "xlrd                             2.0.1\n",
            "xxhash                           3.4.1\n",
            "xyzservices                      2023.10.1\n",
            "yarl                             1.9.2\n",
            "yellowbrick                      1.5\n",
            "yfinance                         0.2.31\n",
            "zict                             3.0.0\n",
            "zipp                             3.17.0\n"
          ]
        }
      ],
      "source": [
        "!pip list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9N512bPnO9NB",
        "outputId": "0b7f5ef9-0686-4595-b399-e8d2469fc262"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.8.0.76)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: imageio in /usr/local/lib/python3.10/dist-packages (2.31.6)\n",
            "Requirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (4.6.6)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.14.0)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.23.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.44.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (23.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown) (3.13.1)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown) (2.31.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from gdown) (1.16.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown) (4.66.1)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown) (4.11.2)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (23.5.26)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (16.0.6)\n",
            "Requirement already satisfied: ml-dtypes==0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.3.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.5.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.34.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.59.2)\n",
            "Requirement already satisfied: tensorboard<2.15,>=2.14 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.1)\n",
            "Requirement already satisfied: tensorflow-estimator<2.15,>=2.14.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.0)\n",
            "Requirement already satisfied: keras<2.15,>=2.14.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.14.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.41.3)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (2.17.3)\n",
            "Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (1.0.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (3.5.1)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.15,>=2.14->tensorflow) (3.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown) (2.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2023.7.22)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (5.3.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (0.3.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.15,>=2.14->tensorflow) (2.1.3)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow) (0.5.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow) (3.2.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install opencv-python matplotlib imageio gdown tensorflow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "E2Dkr0rqVFVs"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import cv2\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from typing import List\n",
        "from matplotlib import pyplot as plt\n",
        "import imageio\n",
        "from PIL import Image"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4UlCoXLwXpd-",
        "outputId": "bc136145-4009-41ab-a38a-ba22b77bce15"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "tf.config.list_physical_devices('GPU')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "8AE80Za7Y34Q"
      },
      "outputs": [],
      "source": [
        "physical_devices=tf.config.list_physical_devices('GPU')\n",
        "try:\n",
        "  tf.config.experimental.set_memory_growth(physical_devices[0],True)\n",
        "except:\n",
        "  pass"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z2GAeSKRZZcS"
      },
      "source": [
        "1. Build data loading functions:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "WTcWNa1kZdnc"
      },
      "outputs": [],
      "source": [
        "import gdown"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BsR4lYDlbUT7",
        "outputId": "72175fe7-04f0-4fed-b1bd-e72bd73d2469"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1YlvpDLix3S-U8fd-gqRwPcWXAXm8JwjL\n",
            "To: /content/data.zip\n",
            "100%|██████████| 423M/423M [00:04<00:00, 86.8MB/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['data/',\n",
              " 'data/alignments/',\n",
              " 'data/alignments/s1/',\n",
              " 'data/alignments/s1/bbaf2n.align',\n",
              " 'data/alignments/s1/bbaf3s.align',\n",
              " 'data/alignments/s1/bbaf4p.align',\n",
              " 'data/alignments/s1/bbaf5a.align',\n",
              " 'data/alignments/s1/bbal6n.align',\n",
              " 'data/alignments/s1/bbal7s.align',\n",
              " 'data/alignments/s1/bbal8p.align',\n",
              " 'data/alignments/s1/bbal9a.align',\n",
              " 'data/alignments/s1/bbas1s.align',\n",
              " 'data/alignments/s1/bbas2p.align',\n",
              " 'data/alignments/s1/bbas3a.align',\n",
              " 'data/alignments/s1/bbaszn.align',\n",
              " 'data/alignments/s1/bbaz4n.align',\n",
              " 'data/alignments/s1/bbaz5s.align',\n",
              " 'data/alignments/s1/bbaz6p.align',\n",
              " 'data/alignments/s1/bbaz7a.align',\n",
              " 'data/alignments/s1/bbbf6n.align',\n",
              " 'data/alignments/s1/bbbf7s.align',\n",
              " 'data/alignments/s1/bbbf8p.align',\n",
              " 'data/alignments/s1/bbbf9a.align',\n",
              " 'data/alignments/s1/bbbm1s.align',\n",
              " 'data/alignments/s1/bbbm2p.align',\n",
              " 'data/alignments/s1/bbbm3a.align',\n",
              " 'data/alignments/s1/bbbmzn.align',\n",
              " 'data/alignments/s1/bbbs4n.align',\n",
              " 'data/alignments/s1/bbbs5s.align',\n",
              " 'data/alignments/s1/bbbs6p.align',\n",
              " 'data/alignments/s1/bbbs7a.align',\n",
              " 'data/alignments/s1/bbbz8n.align',\n",
              " 'data/alignments/s1/bbbz9s.align',\n",
              " 'data/alignments/s1/bbie8n.align',\n",
              " 'data/alignments/s1/bbie9s.align',\n",
              " 'data/alignments/s1/bbif1a.align',\n",
              " 'data/alignments/s1/bbifzp.align',\n",
              " 'data/alignments/s1/bbil2n.align',\n",
              " 'data/alignments/s1/bbil3s.align',\n",
              " 'data/alignments/s1/bbil4p.align',\n",
              " 'data/alignments/s1/bbil5a.align',\n",
              " 'data/alignments/s1/bbir6n.align',\n",
              " 'data/alignments/s1/bbir7s.align',\n",
              " 'data/alignments/s1/bbir8p.align',\n",
              " 'data/alignments/s1/bbir9a.align',\n",
              " 'data/alignments/s1/bbiz1s.align',\n",
              " 'data/alignments/s1/bbiz2p.align',\n",
              " 'data/alignments/s1/bbiz3a.align',\n",
              " 'data/alignments/s1/bbizzn.align',\n",
              " 'data/alignments/s1/bbwg1s.align',\n",
              " 'data/alignments/s1/bbwg2p.align',\n",
              " 'data/alignments/s1/bbwg3a.align',\n",
              " 'data/alignments/s1/bbwgzn.align',\n",
              " 'data/alignments/s1/bbwm4n.align',\n",
              " 'data/alignments/s1/bbwm5s.align',\n",
              " 'data/alignments/s1/bbwm6p.align',\n",
              " 'data/alignments/s1/bbwm7a.align',\n",
              " 'data/alignments/s1/bbws8n.align',\n",
              " 'data/alignments/s1/bbws9s.align',\n",
              " 'data/alignments/s1/bbwt1a.align',\n",
              " 'data/alignments/s1/bbwtzp.align',\n",
              " 'data/alignments/s1/bgaa6n.align',\n",
              " 'data/alignments/s1/bgaa7s.align',\n",
              " 'data/alignments/s1/bgaa8p.align',\n",
              " 'data/alignments/s1/bgaa9a.align',\n",
              " 'data/alignments/s1/bgah1s.align',\n",
              " 'data/alignments/s1/bgah2p.align',\n",
              " 'data/alignments/s1/bgah3a.align',\n",
              " 'data/alignments/s1/bgahzn.align',\n",
              " 'data/alignments/s1/bgan4n.align',\n",
              " 'data/alignments/s1/bgan5s.align',\n",
              " 'data/alignments/s1/bgan6p.align',\n",
              " 'data/alignments/s1/bgan7a.align',\n",
              " 'data/alignments/s1/bgat8n.align',\n",
              " 'data/alignments/s1/bgat9s.align',\n",
              " 'data/alignments/s1/bgau1a.align',\n",
              " 'data/alignments/s1/bgauzp.align',\n",
              " 'data/alignments/s1/bgbb1s.align',\n",
              " 'data/alignments/s1/bgbb2p.align',\n",
              " 'data/alignments/s1/bgbb3a.align',\n",
              " 'data/alignments/s1/bgbbzn.align',\n",
              " 'data/alignments/s1/bgbh4n.align',\n",
              " 'data/alignments/s1/bgbh5s.align',\n",
              " 'data/alignments/s1/bgbh6p.align',\n",
              " 'data/alignments/s1/bgbh7a.align',\n",
              " 'data/alignments/s1/bgbn8n.align',\n",
              " 'data/alignments/s1/bgbn9s.align',\n",
              " 'data/alignments/s1/bgbo1a.align',\n",
              " 'data/alignments/s1/bgbozp.align',\n",
              " 'data/alignments/s1/bgbu2n.align',\n",
              " 'data/alignments/s1/bgbu3s.align',\n",
              " 'data/alignments/s1/bgbu4p.align',\n",
              " 'data/alignments/s1/bgbu5a.align',\n",
              " 'data/alignments/s1/bgia2n.align',\n",
              " 'data/alignments/s1/bgia3s.align',\n",
              " 'data/alignments/s1/bgia4p.align',\n",
              " 'data/alignments/s1/bgia5a.align',\n",
              " 'data/alignments/s1/bgig6n.align',\n",
              " 'data/alignments/s1/bgig7s.align',\n",
              " 'data/alignments/s1/bgig8p.align',\n",
              " 'data/alignments/s1/bgig9a.align',\n",
              " 'data/alignments/s1/bgin1s.align',\n",
              " 'data/alignments/s1/bgin2p.align',\n",
              " 'data/alignments/s1/bgin3a.align',\n",
              " 'data/alignments/s1/bginzn.align',\n",
              " 'data/alignments/s1/bgit4n.align',\n",
              " 'data/alignments/s1/bgit5s.align',\n",
              " 'data/alignments/s1/bgit6p.align',\n",
              " 'data/alignments/s1/bgit7a.align',\n",
              " 'data/alignments/s1/bgwb4n.align',\n",
              " 'data/alignments/s1/bgwb5s.align',\n",
              " 'data/alignments/s1/bgwb6p.align',\n",
              " 'data/alignments/s1/bgwb7a.align',\n",
              " 'data/alignments/s1/bgwh8n.align',\n",
              " 'data/alignments/s1/bgwh9s.align',\n",
              " 'data/alignments/s1/bgwi1a.align',\n",
              " 'data/alignments/s1/bgwizp.align',\n",
              " 'data/alignments/s1/bgwo2n.align',\n",
              " 'data/alignments/s1/bgwo3s.align',\n",
              " 'data/alignments/s1/bgwo4p.align',\n",
              " 'data/alignments/s1/bgwo5a.align',\n",
              " 'data/alignments/s1/bgwu6n.align',\n",
              " 'data/alignments/s1/bgwu7s.align',\n",
              " 'data/alignments/s1/bgwu8p.align',\n",
              " 'data/alignments/s1/bgwu9a.align',\n",
              " 'data/alignments/s1/braf8n.align',\n",
              " 'data/alignments/s1/braf9s.align',\n",
              " 'data/alignments/s1/brag1a.align',\n",
              " 'data/alignments/s1/bragzp.align',\n",
              " 'data/alignments/s1/bram2n.align',\n",
              " 'data/alignments/s1/bram3s.align',\n",
              " 'data/alignments/s1/bram4p.align',\n",
              " 'data/alignments/s1/bram5a.align',\n",
              " 'data/alignments/s1/bras6n.align',\n",
              " 'data/alignments/s1/bras7s.align',\n",
              " 'data/alignments/s1/bras8p.align',\n",
              " 'data/alignments/s1/bras9a.align',\n",
              " 'data/alignments/s1/brba1a.align',\n",
              " 'data/alignments/s1/brbazp.align',\n",
              " 'data/alignments/s1/brbg2n.align',\n",
              " 'data/alignments/s1/brbg3s.align',\n",
              " 'data/alignments/s1/brbg4p.align',\n",
              " 'data/alignments/s1/brbg5a.align',\n",
              " 'data/alignments/s1/brbm6n.align',\n",
              " 'data/alignments/s1/brbm7s.align',\n",
              " 'data/alignments/s1/brbm8p.align',\n",
              " 'data/alignments/s1/brbm9a.align',\n",
              " 'data/alignments/s1/brbt1s.align',\n",
              " 'data/alignments/s1/brbt2p.align',\n",
              " 'data/alignments/s1/brbt3a.align',\n",
              " 'data/alignments/s1/brbtzn.align',\n",
              " 'data/alignments/s1/brif4n.align',\n",
              " 'data/alignments/s1/brif5s.align',\n",
              " 'data/alignments/s1/brif6p.align',\n",
              " 'data/alignments/s1/brif7a.align',\n",
              " 'data/alignments/s1/bril8n.align',\n",
              " 'data/alignments/s1/bril9s.align',\n",
              " 'data/alignments/s1/brim1a.align',\n",
              " 'data/alignments/s1/brimzp.align',\n",
              " 'data/alignments/s1/bris2n.align',\n",
              " 'data/alignments/s1/bris3s.align',\n",
              " 'data/alignments/s1/bris4p.align',\n",
              " 'data/alignments/s1/bris5a.align',\n",
              " 'data/alignments/s1/briz6n.align',\n",
              " 'data/alignments/s1/briz7s.align',\n",
              " 'data/alignments/s1/briz8p.align',\n",
              " 'data/alignments/s1/briz9a.align',\n",
              " 'data/alignments/s1/brwa2n.align',\n",
              " 'data/alignments/s1/brwa3s.align',\n",
              " 'data/alignments/s1/brwa4p.align',\n",
              " 'data/alignments/s1/brwa5a.align',\n",
              " 'data/alignments/s1/brwg6n.align',\n",
              " 'data/alignments/s1/brwg7s.align',\n",
              " 'data/alignments/s1/brwg8p.align',\n",
              " 'data/alignments/s1/brwg9a.align',\n",
              " 'data/alignments/s1/brwn1s.align',\n",
              " 'data/alignments/s1/brwn2p.align',\n",
              " 'data/alignments/s1/brwn3a.align',\n",
              " 'data/alignments/s1/brwnzn.align',\n",
              " 'data/alignments/s1/brwt4n.align',\n",
              " 'data/alignments/s1/brwt5s.align',\n",
              " 'data/alignments/s1/brwt6p.align',\n",
              " 'data/alignments/s1/brwt7a.align',\n",
              " 'data/alignments/s1/bwaa1s.align',\n",
              " 'data/alignments/s1/bwaa2p.align',\n",
              " 'data/alignments/s1/bwaa3a.align',\n",
              " 'data/alignments/s1/bwaazn.align',\n",
              " 'data/alignments/s1/bwag4n.align',\n",
              " 'data/alignments/s1/bwag5s.align',\n",
              " 'data/alignments/s1/bwag6p.align',\n",
              " 'data/alignments/s1/bwag7a.align',\n",
              " 'data/alignments/s1/bwam8n.align',\n",
              " 'data/alignments/s1/bwam9s.align',\n",
              " 'data/alignments/s1/bwan1a.align',\n",
              " 'data/alignments/s1/bwanzp.align',\n",
              " 'data/alignments/s1/bwat2n.align',\n",
              " 'data/alignments/s1/bwat3s.align',\n",
              " 'data/alignments/s1/bwat4p.align',\n",
              " 'data/alignments/s1/bwat5a.align',\n",
              " 'data/alignments/s1/bwba4n.align',\n",
              " 'data/alignments/s1/bwba5s.align',\n",
              " 'data/alignments/s1/bwba6p.align',\n",
              " 'data/alignments/s1/bwba7a.align',\n",
              " 'data/alignments/s1/bwbg8n.align',\n",
              " 'data/alignments/s1/bwbg9s.align',\n",
              " 'data/alignments/s1/bwbh1a.align',\n",
              " 'data/alignments/s1/bwbhzp.align',\n",
              " 'data/alignments/s1/bwbn2n.align',\n",
              " 'data/alignments/s1/bwbn3s.align',\n",
              " 'data/alignments/s1/bwbn4p.align',\n",
              " 'data/alignments/s1/bwbn5a.align',\n",
              " 'data/alignments/s1/bwbt6n.align',\n",
              " 'data/alignments/s1/bwbt7s.align',\n",
              " 'data/alignments/s1/bwbt8p.align',\n",
              " 'data/alignments/s1/bwbt9a.align',\n",
              " 'data/alignments/s1/bwig1s.align',\n",
              " 'data/alignments/s1/bwig2p.align',\n",
              " 'data/alignments/s1/bwig3a.align',\n",
              " 'data/alignments/s1/bwigzn.align',\n",
              " 'data/alignments/s1/bwim4n.align',\n",
              " 'data/alignments/s1/bwim5s.align',\n",
              " 'data/alignments/s1/bwim6p.align',\n",
              " 'data/alignments/s1/bwim7a.align',\n",
              " 'data/alignments/s1/bwis8n.align',\n",
              " 'data/alignments/s1/bwis9s.align',\n",
              " 'data/alignments/s1/bwit1a.align',\n",
              " 'data/alignments/s1/bwitzp.align',\n",
              " 'data/alignments/s1/bwwa8n.align',\n",
              " 'data/alignments/s1/bwwa9s.align',\n",
              " 'data/alignments/s1/bwwb1a.align',\n",
              " 'data/alignments/s1/bwwbzp.align',\n",
              " 'data/alignments/s1/bwwh2n.align',\n",
              " 'data/alignments/s1/bwwh3s.align',\n",
              " 'data/alignments/s1/bwwh4p.align',\n",
              " 'data/alignments/s1/bwwh5a.align',\n",
              " 'data/alignments/s1/bwwn6n.align',\n",
              " 'data/alignments/s1/bwwn7s.align',\n",
              " 'data/alignments/s1/bwwn8p.align',\n",
              " 'data/alignments/s1/bwwn9a.align',\n",
              " 'data/alignments/s1/bwwu1s.align',\n",
              " 'data/alignments/s1/bwwu2p.align',\n",
              " 'data/alignments/s1/bwwu3a.align',\n",
              " 'data/alignments/s1/bwwuzn.align',\n",
              " 'data/alignments/s1/lbad6n.align',\n",
              " 'data/alignments/s1/lbad7s.align',\n",
              " 'data/alignments/s1/lbad8p.align',\n",
              " 'data/alignments/s1/lbad9a.align',\n",
              " 'data/alignments/s1/lbak1s.align',\n",
              " 'data/alignments/s1/lbak2p.align',\n",
              " 'data/alignments/s1/lbak3a.align',\n",
              " 'data/alignments/s1/lbakzn.align',\n",
              " 'data/alignments/s1/lbaq4n.align',\n",
              " 'data/alignments/s1/lbaq5s.align',\n",
              " 'data/alignments/s1/lbaq6p.align',\n",
              " 'data/alignments/s1/lbaq7a.align',\n",
              " 'data/alignments/s1/lbax8n.align',\n",
              " 'data/alignments/s1/lbax9s.align',\n",
              " 'data/alignments/s1/lbay1a.align',\n",
              " 'data/alignments/s1/lbayzp.align',\n",
              " 'data/alignments/s1/lbbe1s.align',\n",
              " 'data/alignments/s1/lbbe2p.align',\n",
              " 'data/alignments/s1/lbbe3a.align',\n",
              " 'data/alignments/s1/lbbezn.align',\n",
              " 'data/alignments/s1/lbbk4n.align',\n",
              " 'data/alignments/s1/lbbk5s.align',\n",
              " 'data/alignments/s1/lbbk6p.align',\n",
              " 'data/alignments/s1/lbbk7a.align',\n",
              " 'data/alignments/s1/lbbq8n.align',\n",
              " 'data/alignments/s1/lbbq9s.align',\n",
              " 'data/alignments/s1/lbbr1a.align',\n",
              " 'data/alignments/s1/lbbrzp.align',\n",
              " 'data/alignments/s1/lbby2n.align',\n",
              " 'data/alignments/s1/lbby3s.align',\n",
              " 'data/alignments/s1/lbby4p.align',\n",
              " 'data/alignments/s1/lbby5a.align',\n",
              " 'data/alignments/s1/lbid2n.align',\n",
              " 'data/alignments/s1/lbid3s.align',\n",
              " 'data/alignments/s1/lbid4p.align',\n",
              " 'data/alignments/s1/lbid5a.align',\n",
              " 'data/alignments/s1/lbij6n.align',\n",
              " 'data/alignments/s1/lbij7s.align',\n",
              " 'data/alignments/s1/lbij8p.align',\n",
              " 'data/alignments/s1/lbij9a.align',\n",
              " 'data/alignments/s1/lbiq1s.align',\n",
              " 'data/alignments/s1/lbiq2p.align',\n",
              " 'data/alignments/s1/lbiq3a.align',\n",
              " 'data/alignments/s1/lbiqzn.align',\n",
              " 'data/alignments/s1/lbix4n.align',\n",
              " 'data/alignments/s1/lbix5s.align',\n",
              " 'data/alignments/s1/lbix6p.align',\n",
              " 'data/alignments/s1/lbix7a.align',\n",
              " 'data/alignments/s1/lbwe4n.align',\n",
              " 'data/alignments/s1/lbwe5s.align',\n",
              " 'data/alignments/s1/lbwe6p.align',\n",
              " 'data/alignments/s1/lbwe7a.align',\n",
              " 'data/alignments/s1/lbwk8n.align',\n",
              " 'data/alignments/s1/lbwk9s.align',\n",
              " 'data/alignments/s1/lbwl1a.align',\n",
              " 'data/alignments/s1/lbwlzp.align',\n",
              " 'data/alignments/s1/lbwr2n.align',\n",
              " 'data/alignments/s1/lbwr3s.align',\n",
              " 'data/alignments/s1/lbwr4p.align',\n",
              " 'data/alignments/s1/lbwr5a.align',\n",
              " 'data/alignments/s1/lbwy6n.align',\n",
              " 'data/alignments/s1/lbwy7s.align',\n",
              " 'data/alignments/s1/lbwy8p.align',\n",
              " 'data/alignments/s1/lbwy9a.align',\n",
              " 'data/alignments/s1/lgaf4n.align',\n",
              " 'data/alignments/s1/lgaf5s.align',\n",
              " 'data/alignments/s1/lgaf6p.align',\n",
              " 'data/alignments/s1/lgaf7a.align',\n",
              " 'data/alignments/s1/lgal8n.align',\n",
              " 'data/alignments/s1/lgal9s.align',\n",
              " 'data/alignments/s1/lgam1a.align',\n",
              " 'data/alignments/s1/lgamzp.align',\n",
              " 'data/alignments/s1/lgas2n.align',\n",
              " 'data/alignments/s1/lgas3s.align',\n",
              " 'data/alignments/s1/lgas4p.align',\n",
              " 'data/alignments/s1/lgas5a.align',\n",
              " 'data/alignments/s1/lgaz6n.align',\n",
              " 'data/alignments/s1/lgaz7s.align',\n",
              " 'data/alignments/s1/lgaz8p.align',\n",
              " 'data/alignments/s1/lgaz9a.align',\n",
              " 'data/alignments/s1/lgbf8n.align',\n",
              " 'data/alignments/s1/lgbf9s.align',\n",
              " 'data/alignments/s1/lgbg1a.align',\n",
              " 'data/alignments/s1/lgbgzp.align',\n",
              " 'data/alignments/s1/lgbm2n.align',\n",
              " 'data/alignments/s1/lgbm3s.align',\n",
              " 'data/alignments/s1/lgbm4p.align',\n",
              " 'data/alignments/s1/lgbm5a.align',\n",
              " 'data/alignments/s1/lgbs6n.align',\n",
              " 'data/alignments/s1/lgbs7s.align',\n",
              " 'data/alignments/s1/lgbs8p.align',\n",
              " 'data/alignments/s1/lgbs9a.align',\n",
              " 'data/alignments/s1/lgif1s.align',\n",
              " 'data/alignments/s1/lgif2p.align',\n",
              " 'data/alignments/s1/lgif3a.align',\n",
              " 'data/alignments/s1/lgifzn.align',\n",
              " 'data/alignments/s1/lgil4n.align',\n",
              " 'data/alignments/s1/lgil5s.align',\n",
              " 'data/alignments/s1/lgil6p.align',\n",
              " 'data/alignments/s1/lgil7a.align',\n",
              " 'data/alignments/s1/lgir8n.align',\n",
              " 'data/alignments/s1/lgir9s.align',\n",
              " 'data/alignments/s1/lgis1a.align',\n",
              " 'data/alignments/s1/lgiszp.align',\n",
              " 'data/alignments/s1/lgiz2n.align',\n",
              " 'data/alignments/s1/lgiz3s.align',\n",
              " 'data/alignments/s1/lgiz4p.align',\n",
              " 'data/alignments/s1/lgiz5a.align',\n",
              " 'data/alignments/s1/lgwa1a.align',\n",
              " 'data/alignments/s1/lgwazp.align',\n",
              " 'data/alignments/s1/lgwg2n.align',\n",
              " 'data/alignments/s1/lgwg3s.align',\n",
              " 'data/alignments/s1/lgwg4p.align',\n",
              " 'data/alignments/s1/lgwg5a.align',\n",
              " 'data/alignments/s1/lgwm6n.align',\n",
              " 'data/alignments/s1/lgwm7s.align',\n",
              " 'data/alignments/s1/lgwm8p.align',\n",
              " 'data/alignments/s1/lgwm9a.align',\n",
              " 'data/alignments/s1/lgwt1s.align',\n",
              " 'data/alignments/s1/lgwt2p.align',\n",
              " 'data/alignments/s1/lgwt3a.align',\n",
              " 'data/alignments/s1/lgwtzn.align',\n",
              " 'data/alignments/s1/lrae2n.align',\n",
              " 'data/alignments/s1/lrae3s.align',\n",
              " 'data/alignments/s1/lrae4p.align',\n",
              " 'data/alignments/s1/lrae5a.align',\n",
              " 'data/alignments/s1/lrak6n.align',\n",
              " 'data/alignments/s1/lrak7s.align',\n",
              " 'data/alignments/s1/lrak8p.align',\n",
              " 'data/alignments/s1/lrak9a.align',\n",
              " 'data/alignments/s1/lrar1s.align',\n",
              " 'data/alignments/s1/lrar2p.align',\n",
              " 'data/alignments/s1/lrar3a.align',\n",
              " 'data/alignments/s1/lrarzn.align',\n",
              " 'data/alignments/s1/lray4n.align',\n",
              " 'data/alignments/s1/lray5s.align',\n",
              " 'data/alignments/s1/lray6p.align',\n",
              " 'data/alignments/s1/lray7a.align',\n",
              " 'data/alignments/s1/lrbe6n.align',\n",
              " 'data/alignments/s1/lrbe7s.align',\n",
              " 'data/alignments/s1/lrbe8p.align',\n",
              " 'data/alignments/s1/lrbe9a.align',\n",
              " 'data/alignments/s1/lrbl1s.align',\n",
              " 'data/alignments/s1/lrbl2p.align',\n",
              " 'data/alignments/s1/lrbl3a.align',\n",
              " 'data/alignments/s1/lrblzn.align',\n",
              " 'data/alignments/s1/lrbr4n.align',\n",
              " 'data/alignments/s1/lrbr5s.align',\n",
              " 'data/alignments/s1/lrbr6p.align',\n",
              " 'data/alignments/s1/lrbr7a.align',\n",
              " 'data/alignments/s1/lrby8n.align',\n",
              " 'data/alignments/s1/lrby9s.align',\n",
              " 'data/alignments/s1/lrbz1a.align',\n",
              " 'data/alignments/s1/lrbzzp.align',\n",
              " 'data/alignments/s1/lrid8n.align',\n",
              " 'data/alignments/s1/lrid9s.align',\n",
              " 'data/alignments/s1/lrie1a.align',\n",
              " 'data/alignments/s1/lriezp.align',\n",
              " 'data/alignments/s1/lrik2n.align',\n",
              " 'data/alignments/s1/lrik3s.align',\n",
              " 'data/alignments/s1/lrik4p.align',\n",
              " 'data/alignments/s1/lrik5a.align',\n",
              " 'data/alignments/s1/lriq6n.align',\n",
              " 'data/alignments/s1/lriq7s.align',\n",
              " 'data/alignments/s1/lriq8p.align',\n",
              " 'data/alignments/s1/lriq9a.align',\n",
              " 'data/alignments/s1/lriy1s.align',\n",
              " 'data/alignments/s1/lriy2p.align',\n",
              " 'data/alignments/s1/lriy3a.align',\n",
              " 'data/alignments/s1/lriyzn.align',\n",
              " 'data/alignments/s1/lrwf1s.align',\n",
              " 'data/alignments/s1/lrwf2p.align',\n",
              " 'data/alignments/s1/lrwf3a.align',\n",
              " 'data/alignments/s1/lrwfzn.align',\n",
              " 'data/alignments/s1/lrwl4n.align',\n",
              " 'data/alignments/s1/lrwl5s.align',\n",
              " 'data/alignments/s1/lrwl6p.align',\n",
              " 'data/alignments/s1/lrwl7a.align',\n",
              " 'data/alignments/s1/lrwr8n.align',\n",
              " 'data/alignments/s1/lrwr9s.align',\n",
              " 'data/alignments/s1/lrws1a.align',\n",
              " 'data/alignments/s1/lrwszp.align',\n",
              " 'data/alignments/s1/lrwz2n.align',\n",
              " 'data/alignments/s1/lrwz3s.align',\n",
              " 'data/alignments/s1/lrwz4p.align',\n",
              " 'data/alignments/s1/lrwz5a.align',\n",
              " 'data/alignments/s1/lwae8n.align',\n",
              " 'data/alignments/s1/lwae9s.align',\n",
              " 'data/alignments/s1/lwaf1a.align',\n",
              " 'data/alignments/s1/lwafzp.align',\n",
              " 'data/alignments/s1/lwal2n.align',\n",
              " 'data/alignments/s1/lwal3s.align',\n",
              " 'data/alignments/s1/lwal4p.align',\n",
              " 'data/alignments/s1/lwal5a.align',\n",
              " 'data/alignments/s1/lwar6n.align',\n",
              " 'data/alignments/s1/lwar7s.align',\n",
              " 'data/alignments/s1/lwar8p.align',\n",
              " 'data/alignments/s1/lwar9a.align',\n",
              " 'data/alignments/s1/lwaz1s.align',\n",
              " 'data/alignments/s1/lwaz2p.align',\n",
              " 'data/alignments/s1/lwaz3a.align',\n",
              " 'data/alignments/s1/lwazzn.align',\n",
              " 'data/alignments/s1/lwbf2n.align',\n",
              " 'data/alignments/s1/lwbf3s.align',\n",
              " 'data/alignments/s1/lwbf4p.align',\n",
              " 'data/alignments/s1/lwbf5a.align',\n",
              " 'data/alignments/s1/lwbl6n.align',\n",
              " 'data/alignments/s1/lwbl7s.align',\n",
              " 'data/alignments/s1/lwbl8p.align',\n",
              " 'data/alignments/s1/lwbl9a.align',\n",
              " 'data/alignments/s1/lwbs1s.align',\n",
              " 'data/alignments/s1/lwbs2p.align',\n",
              " 'data/alignments/s1/lwbs3a.align',\n",
              " 'data/alignments/s1/lwbszn.align',\n",
              " 'data/alignments/s1/lwbz4n.align',\n",
              " 'data/alignments/s1/lwbz5s.align',\n",
              " 'data/alignments/s1/lwbz6p.align',\n",
              " 'data/alignments/s1/lwbz7a.align',\n",
              " 'data/alignments/s1/lwie4n.align',\n",
              " 'data/alignments/s1/lwie5s.align',\n",
              " 'data/alignments/s1/lwie6p.align',\n",
              " 'data/alignments/s1/lwie7a.align',\n",
              " 'data/alignments/s1/lwik8n.align',\n",
              " 'data/alignments/s1/lwik9s.align',\n",
              " 'data/alignments/s1/lwil1a.align',\n",
              " 'data/alignments/s1/lwilzp.align',\n",
              " 'data/alignments/s1/lwir2n.align',\n",
              " 'data/alignments/s1/lwir3s.align',\n",
              " 'data/alignments/s1/lwir4p.align',\n",
              " 'data/alignments/s1/lwir5a.align',\n",
              " 'data/alignments/s1/lwiy6n.align',\n",
              " 'data/alignments/s1/lwiy7s.align',\n",
              " 'data/alignments/s1/lwiy8p.align',\n",
              " 'data/alignments/s1/lwiy9a.align',\n",
              " 'data/alignments/s1/lwwf6n.align',\n",
              " 'data/alignments/s1/lwwf7s.align',\n",
              " 'data/alignments/s1/lwwf8p.align',\n",
              " 'data/alignments/s1/lwwf9a.align',\n",
              " 'data/alignments/s1/lwwm1s.align',\n",
              " 'data/alignments/s1/lwwm2p.align',\n",
              " 'data/alignments/s1/lwwm3a.align',\n",
              " 'data/alignments/s1/lwwmzn.align',\n",
              " 'data/alignments/s1/lwws4n.align',\n",
              " 'data/alignments/s1/lwws5s.align',\n",
              " 'data/alignments/s1/lwws6p.align',\n",
              " 'data/alignments/s1/lwws7a.align',\n",
              " 'data/alignments/s1/lwwz8n.align',\n",
              " 'data/alignments/s1/lwwz9s.align',\n",
              " 'data/alignments/s1/pbac1s.align',\n",
              " 'data/alignments/s1/pbac2p.align',\n",
              " 'data/alignments/s1/pbac3a.align',\n",
              " 'data/alignments/s1/pbaczn.align',\n",
              " 'data/alignments/s1/pbai4n.align',\n",
              " 'data/alignments/s1/pbai5s.align',\n",
              " 'data/alignments/s1/pbai6p.align',\n",
              " 'data/alignments/s1/pbai7a.align',\n",
              " 'data/alignments/s1/pbao8n.align',\n",
              " 'data/alignments/s1/pbao9s.align',\n",
              " 'data/alignments/s1/pbap1a.align',\n",
              " 'data/alignments/s1/pbapzp.align',\n",
              " 'data/alignments/s1/pbav2n.align',\n",
              " 'data/alignments/s1/pbav3s.align',\n",
              " 'data/alignments/s1/pbav4p.align',\n",
              " 'data/alignments/s1/pbav5a.align',\n",
              " 'data/alignments/s1/pbbc4n.align',\n",
              " 'data/alignments/s1/pbbc5s.align',\n",
              " 'data/alignments/s1/pbbc6p.align',\n",
              " 'data/alignments/s1/pbbc7a.align',\n",
              " 'data/alignments/s1/pbbi8n.align',\n",
              " 'data/alignments/s1/pbbi9s.align',\n",
              " 'data/alignments/s1/pbbj1a.align',\n",
              " 'data/alignments/s1/pbbjzp.align',\n",
              " 'data/alignments/s1/pbbp2n.align',\n",
              " 'data/alignments/s1/pbbp3s.align',\n",
              " 'data/alignments/s1/pbbp4p.align',\n",
              " 'data/alignments/s1/pbbp5a.align',\n",
              " 'data/alignments/s1/pbbv6n.align',\n",
              " 'data/alignments/s1/pbbv7s.align',\n",
              " 'data/alignments/s1/pbbv8p.align',\n",
              " 'data/alignments/s1/pbbv9a.align',\n",
              " 'data/alignments/s1/pbib6n.align',\n",
              " 'data/alignments/s1/pbib7s.align',\n",
              " 'data/alignments/s1/pbib8p.align',\n",
              " 'data/alignments/s1/pbib9a.align',\n",
              " 'data/alignments/s1/pbii1s.align',\n",
              " 'data/alignments/s1/pbii2p.align',\n",
              " 'data/alignments/s1/pbii3a.align',\n",
              " 'data/alignments/s1/pbiizn.align',\n",
              " 'data/alignments/s1/pbio4n.align',\n",
              " 'data/alignments/s1/pbio5s.align',\n",
              " 'data/alignments/s1/pbio6p.align',\n",
              " 'data/alignments/s1/pbio7a.align',\n",
              " 'data/alignments/s1/pbiu8n.align',\n",
              " 'data/alignments/s1/pbiu9s.align',\n",
              " 'data/alignments/s1/pbiv1a.align',\n",
              " 'data/alignments/s1/pbivzp.align',\n",
              " 'data/alignments/s1/pbwc8n.align',\n",
              " 'data/alignments/s1/pbwc9s.align',\n",
              " 'data/alignments/s1/pbwd1a.align',\n",
              " 'data/alignments/s1/pbwdzp.align',\n",
              " 'data/alignments/s1/pbwj2n.align',\n",
              " 'data/alignments/s1/pbwj3s.align',\n",
              " 'data/alignments/s1/pbwj4p.align',\n",
              " 'data/alignments/s1/pbwj5a.align',\n",
              " 'data/alignments/s1/pbwp6n.align',\n",
              " 'data/alignments/s1/pbwp7s.align',\n",
              " 'data/alignments/s1/pbwp8p.align',\n",
              " 'data/alignments/s1/pbwp9a.align',\n",
              " 'data/alignments/s1/pbwx1s.align',\n",
              " 'data/alignments/s1/pbwx2p.align',\n",
              " 'data/alignments/s1/pbwx3a.align',\n",
              " 'data/alignments/s1/pbwxzn.align',\n",
              " 'data/alignments/s1/pgad8n.align',\n",
              " 'data/alignments/s1/pgad9s.align',\n",
              " 'data/alignments/s1/pgae1a.align',\n",
              " 'data/alignments/s1/pgaezp.align',\n",
              " 'data/alignments/s1/pgak2n.align',\n",
              " 'data/alignments/s1/pgak3s.align',\n",
              " 'data/alignments/s1/pgak4p.align',\n",
              " 'data/alignments/s1/pgak5a.align',\n",
              " 'data/alignments/s1/pgaq6n.align',\n",
              " 'data/alignments/s1/pgaq7s.align',\n",
              " 'data/alignments/s1/pgaq8p.align',\n",
              " 'data/alignments/s1/pgaq9a.align',\n",
              " 'data/alignments/s1/pgay1s.align',\n",
              " 'data/alignments/s1/pgay2p.align',\n",
              " 'data/alignments/s1/pgay3a.align',\n",
              " 'data/alignments/s1/pgayzn.align',\n",
              " 'data/alignments/s1/pgbe2n.align',\n",
              " 'data/alignments/s1/pgbe3s.align',\n",
              " 'data/alignments/s1/pgbe4p.align',\n",
              " 'data/alignments/s1/pgbe5a.align',\n",
              " 'data/alignments/s1/pgbk6n.align',\n",
              " 'data/alignments/s1/pgbk7s.align',\n",
              " 'data/alignments/s1/pgbk8p.align',\n",
              " 'data/alignments/s1/pgbk9a.align',\n",
              " 'data/alignments/s1/pgbr1s.align',\n",
              " 'data/alignments/s1/pgbr2p.align',\n",
              " 'data/alignments/s1/pgbr3a.align',\n",
              " 'data/alignments/s1/pgbrzn.align',\n",
              " 'data/alignments/s1/pgby4n.align',\n",
              " 'data/alignments/s1/pgby5s.align',\n",
              " 'data/alignments/s1/pgby6p.align',\n",
              " 'data/alignments/s1/pgby7a.align',\n",
              " 'data/alignments/s1/pgid4n.align',\n",
              " 'data/alignments/s1/pgid5s.align',\n",
              " 'data/alignments/s1/pgid6p.align',\n",
              " 'data/alignments/s1/pgid7a.align',\n",
              " 'data/alignments/s1/pgij8n.align',\n",
              " 'data/alignments/s1/pgij9s.align',\n",
              " 'data/alignments/s1/pgik1a.align',\n",
              " 'data/alignments/s1/pgikzp.align',\n",
              " 'data/alignments/s1/pgiq2n.align',\n",
              " 'data/alignments/s1/pgiq3s.align',\n",
              " 'data/alignments/s1/pgiq4p.align',\n",
              " 'data/alignments/s1/pgiq5a.align',\n",
              " 'data/alignments/s1/pgix6n.align',\n",
              " 'data/alignments/s1/pgix7s.align',\n",
              " 'data/alignments/s1/pgix8p.align',\n",
              " 'data/alignments/s1/pgix9a.align',\n",
              " 'data/alignments/s1/pgwe6n.align',\n",
              " 'data/alignments/s1/pgwe7s.align',\n",
              " 'data/alignments/s1/pgwe8p.align',\n",
              " 'data/alignments/s1/pgwe9a.align',\n",
              " 'data/alignments/s1/pgwl1s.align',\n",
              " 'data/alignments/s1/pgwl2p.align',\n",
              " 'data/alignments/s1/pgwl3a.align',\n",
              " 'data/alignments/s1/pgwlzn.align',\n",
              " 'data/alignments/s1/pgwr4n.align',\n",
              " 'data/alignments/s1/pgwr5s.align',\n",
              " 'data/alignments/s1/pgwr6p.align',\n",
              " 'data/alignments/s1/pgwr7a.align',\n",
              " 'data/alignments/s1/pgwy8n.align',\n",
              " 'data/alignments/s1/pgwy9s.align',\n",
              " 'data/alignments/s1/pgwz1a.align',\n",
              " 'data/alignments/s1/pgwzzp.align',\n",
              " 'data/alignments/s1/prac6n.align',\n",
              " 'data/alignments/s1/prac7s.align',\n",
              " 'data/alignments/s1/prac8p.align',\n",
              " 'data/alignments/s1/prac9a.align',\n",
              " 'data/alignments/s1/praj1s.align',\n",
              " 'data/alignments/s1/praj2p.align',\n",
              " 'data/alignments/s1/praj3a.align',\n",
              " 'data/alignments/s1/prajzn.align',\n",
              " 'data/alignments/s1/prap4n.align',\n",
              " 'data/alignments/s1/prap5s.align',\n",
              " 'data/alignments/s1/prap6p.align',\n",
              " 'data/alignments/s1/prap7a.align',\n",
              " 'data/alignments/s1/prav8n.align',\n",
              " 'data/alignments/s1/prav9s.align',\n",
              " 'data/alignments/s1/prax1a.align',\n",
              " 'data/alignments/s1/praxzp.align',\n",
              " 'data/alignments/s1/prbd1s.align',\n",
              " 'data/alignments/s1/prbd2p.align',\n",
              " 'data/alignments/s1/prbd3a.align',\n",
              " 'data/alignments/s1/prbdzn.align',\n",
              " 'data/alignments/s1/prbj4n.align',\n",
              " 'data/alignments/s1/prbj5s.align',\n",
              " 'data/alignments/s1/prbj6p.align',\n",
              " 'data/alignments/s1/prbj7a.align',\n",
              " 'data/alignments/s1/prbp8n.align',\n",
              " 'data/alignments/s1/prbp9s.align',\n",
              " 'data/alignments/s1/prbq1a.align',\n",
              " 'data/alignments/s1/prbqzp.align',\n",
              " 'data/alignments/s1/prbx2n.align',\n",
              " 'data/alignments/s1/prbx3s.align',\n",
              " 'data/alignments/s1/prbx4p.align',\n",
              " 'data/alignments/s1/prbx5a.align',\n",
              " 'data/alignments/s1/pric2n.align',\n",
              " 'data/alignments/s1/pric3s.align',\n",
              " 'data/alignments/s1/pric4p.align',\n",
              " 'data/alignments/s1/pric5a.align',\n",
              " 'data/alignments/s1/prii6n.align',\n",
              " 'data/alignments/s1/prii7s.align',\n",
              " 'data/alignments/s1/prii8p.align',\n",
              " 'data/alignments/s1/prii9a.align',\n",
              " 'data/alignments/s1/prip1s.align',\n",
              " 'data/alignments/s1/prip2p.align',\n",
              " 'data/alignments/s1/prip3a.align',\n",
              " 'data/alignments/s1/pripzn.align',\n",
              " 'data/alignments/s1/priv4n.align',\n",
              " 'data/alignments/s1/priv5s.align',\n",
              " 'data/alignments/s1/priv6p.align',\n",
              " 'data/alignments/s1/priv7a.align',\n",
              " 'data/alignments/s1/prwd4n.align',\n",
              " 'data/alignments/s1/prwd5s.align',\n",
              " 'data/alignments/s1/prwd6p.align',\n",
              " 'data/alignments/s1/prwd7a.align',\n",
              " 'data/alignments/s1/prwj8n.align',\n",
              " 'data/alignments/s1/prwj9s.align',\n",
              " 'data/alignments/s1/prwk1a.align',\n",
              " 'data/alignments/s1/prwkzp.align',\n",
              " 'data/alignments/s1/prwq2n.align',\n",
              " 'data/alignments/s1/prwq3s.align',\n",
              " 'data/alignments/s1/prwq4p.align',\n",
              " 'data/alignments/s1/prwq5a.align',\n",
              " 'data/alignments/s1/prwx6n.align',\n",
              " 'data/alignments/s1/prwx7s.align',\n",
              " 'data/alignments/s1/prwx8p.align',\n",
              " 'data/alignments/s1/prwx9a.align',\n",
              " 'data/alignments/s1/pwad2n.align',\n",
              " 'data/alignments/s1/pwad3s.align',\n",
              " 'data/alignments/s1/pwad4p.align',\n",
              " 'data/alignments/s1/pwad5a.align',\n",
              " 'data/alignments/s1/pwaj6n.align',\n",
              " 'data/alignments/s1/pwaj7s.align',\n",
              " 'data/alignments/s1/pwaj8p.align',\n",
              " 'data/alignments/s1/pwaj9a.align',\n",
              " 'data/alignments/s1/pwaq1s.align',\n",
              " 'data/alignments/s1/pwaq2p.align',\n",
              " 'data/alignments/s1/pwaq3a.align',\n",
              " 'data/alignments/s1/pwaqzn.align',\n",
              " 'data/alignments/s1/pwax4n.align',\n",
              " 'data/alignments/s1/pwax5s.align',\n",
              " 'data/alignments/s1/pwax6p.align',\n",
              " 'data/alignments/s1/pwax7a.align',\n",
              " 'data/alignments/s1/pwbd6n.align',\n",
              " 'data/alignments/s1/pwbd7s.align',\n",
              " 'data/alignments/s1/pwbd8p.align',\n",
              " 'data/alignments/s1/pwbd9a.align',\n",
              " 'data/alignments/s1/pwbk1s.align',\n",
              " 'data/alignments/s1/pwbk2p.align',\n",
              " 'data/alignments/s1/pwbk3a.align',\n",
              " 'data/alignments/s1/pwbkzn.align',\n",
              " 'data/alignments/s1/pwbq4n.align',\n",
              " 'data/alignments/s1/pwbq5s.align',\n",
              " 'data/alignments/s1/pwbq6p.align',\n",
              " 'data/alignments/s1/pwbq7a.align',\n",
              " 'data/alignments/s1/pwbx8n.align',\n",
              " 'data/alignments/s1/pwbx9s.align',\n",
              " 'data/alignments/s1/pwby1a.align',\n",
              " 'data/alignments/s1/pwbyzp.align',\n",
              " 'data/alignments/s1/pwic8n.align',\n",
              " 'data/alignments/s1/pwic9s.align',\n",
              " 'data/alignments/s1/pwid1a.align',\n",
              " 'data/alignments/s1/pwidzp.align',\n",
              " 'data/alignments/s1/pwij2n.align',\n",
              " 'data/alignments/s1/pwij3s.align',\n",
              " 'data/alignments/s1/pwij4p.align',\n",
              " 'data/alignments/s1/pwij5a.align',\n",
              " 'data/alignments/s1/pwip6n.align',\n",
              " 'data/alignments/s1/pwip7s.align',\n",
              " 'data/alignments/s1/pwip8p.align',\n",
              " 'data/alignments/s1/pwip9a.align',\n",
              " 'data/alignments/s1/pwix1s.align',\n",
              " 'data/alignments/s1/pwix2p.align',\n",
              " 'data/alignments/s1/pwix3a.align',\n",
              " 'data/alignments/s1/pwixzn.align',\n",
              " 'data/alignments/s1/pwwe1s.align',\n",
              " 'data/alignments/s1/pwwe2p.align',\n",
              " 'data/alignments/s1/pwwe3a.align',\n",
              " 'data/alignments/s1/pwwezn.align',\n",
              " 'data/alignments/s1/pwwk4n.align',\n",
              " 'data/alignments/s1/pwwk5s.align',\n",
              " 'data/alignments/s1/pwwk6p.align',\n",
              " 'data/alignments/s1/pwwk7a.align',\n",
              " 'data/alignments/s1/pwwq8n.align',\n",
              " 'data/alignments/s1/pwwq9s.align',\n",
              " 'data/alignments/s1/pwwr1a.align',\n",
              " 'data/alignments/s1/pwwrzp.align',\n",
              " 'data/alignments/s1/pwwy2n.align',\n",
              " 'data/alignments/s1/pwwy3s.align',\n",
              " 'data/alignments/s1/pwwy4p.align',\n",
              " 'data/alignments/s1/pwwy5a.align',\n",
              " 'data/alignments/s1/sbaa4n.align',\n",
              " 'data/alignments/s1/sbaa5s.align',\n",
              " 'data/alignments/s1/sbaa6p.align',\n",
              " 'data/alignments/s1/sbaa7a.align',\n",
              " 'data/alignments/s1/sbag8n.align',\n",
              " 'data/alignments/s1/sbag9s.align',\n",
              " 'data/alignments/s1/sbah1a.align',\n",
              " 'data/alignments/s1/sbahzp.align',\n",
              " 'data/alignments/s1/sban2n.align',\n",
              " 'data/alignments/s1/sban3s.align',\n",
              " 'data/alignments/s1/sban4p.align',\n",
              " 'data/alignments/s1/sban5a.align',\n",
              " 'data/alignments/s1/sbat6n.align',\n",
              " 'data/alignments/s1/sbat7s.align',\n",
              " 'data/alignments/s1/sbat8p.align',\n",
              " 'data/alignments/s1/sbat9a.align',\n",
              " 'data/alignments/s1/sbba8n.align',\n",
              " 'data/alignments/s1/sbba9s.align',\n",
              " 'data/alignments/s1/sbbb1a.align',\n",
              " 'data/alignments/s1/sbbbzp.align',\n",
              " 'data/alignments/s1/sbbh2n.align',\n",
              " 'data/alignments/s1/sbbh3s.align',\n",
              " 'data/alignments/s1/sbbh4p.align',\n",
              " 'data/alignments/s1/sbbh5a.align',\n",
              " 'data/alignments/s1/sbbn6n.align',\n",
              " 'data/alignments/s1/sbbn7s.align',\n",
              " 'data/alignments/s1/sbbn8p.align',\n",
              " 'data/alignments/s1/sbbn9a.align',\n",
              " 'data/alignments/s1/sbbu1s.align',\n",
              " 'data/alignments/s1/sbbu2p.align',\n",
              " 'data/alignments/s1/sbbu3a.align',\n",
              " 'data/alignments/s1/sbbuzn.align',\n",
              " 'data/alignments/s1/sbia1s.align',\n",
              " 'data/alignments/s1/sbia2p.align',\n",
              " 'data/alignments/s1/sbia3a.align',\n",
              " 'data/alignments/s1/sbiazn.align',\n",
              " 'data/alignments/s1/sbig4n.align',\n",
              " 'data/alignments/s1/sbig5s.align',\n",
              " 'data/alignments/s1/sbig6p.align',\n",
              " 'data/alignments/s1/sbig7a.align',\n",
              " 'data/alignments/s1/sbim8n.align',\n",
              " 'data/alignments/s1/sbim9s.align',\n",
              " 'data/alignments/s1/sbin1a.align',\n",
              " 'data/alignments/s1/sbinzp.align',\n",
              " 'data/alignments/s1/sbit2n.align',\n",
              " 'data/alignments/s1/sbit3s.align',\n",
              " 'data/alignments/s1/sbit4p.align',\n",
              " 'data/alignments/s1/sbit5a.align',\n",
              " 'data/alignments/s1/sbwb2n.align',\n",
              " 'data/alignments/s1/sbwb3s.align',\n",
              " 'data/alignments/s1/sbwb4p.align',\n",
              " 'data/alignments/s1/sbwb5a.align',\n",
              " 'data/alignments/s1/sbwh6n.align',\n",
              " 'data/alignments/s1/sbwh7s.align',\n",
              " 'data/alignments/s1/sbwh8p.align',\n",
              " 'data/alignments/s1/sbwh9a.align',\n",
              " 'data/alignments/s1/sbwo1s.align',\n",
              " 'data/alignments/s1/sbwo2p.align',\n",
              " 'data/alignments/s1/sbwo3a.align',\n",
              " 'data/alignments/s1/sbwozn.align',\n",
              " 'data/alignments/s1/sbwu4n.align',\n",
              " 'data/alignments/s1/sbwu5s.align',\n",
              " 'data/alignments/s1/sbwu6p.align',\n",
              " 'data/alignments/s1/sbwu7a.align',\n",
              " 'data/alignments/s1/sgac2n.align',\n",
              " 'data/alignments/s1/sgac3s.align',\n",
              " 'data/alignments/s1/sgac4p.align',\n",
              " 'data/alignments/s1/sgac5a.align',\n",
              " 'data/alignments/s1/sgai6n.align',\n",
              " 'data/alignments/s1/sgai7s.align',\n",
              " 'data/alignments/s1/sgai8p.align',\n",
              " 'data/alignments/s1/sgai9a.align',\n",
              " 'data/alignments/s1/sgap1s.align',\n",
              " 'data/alignments/s1/sgap2p.align',\n",
              " 'data/alignments/s1/sgap3a.align',\n",
              " 'data/alignments/s1/sgapzn.align',\n",
              " 'data/alignments/s1/sgav4n.align',\n",
              " 'data/alignments/s1/sgav5s.align',\n",
              " 'data/alignments/s1/sgav6p.align',\n",
              " 'data/alignments/s1/sgav7a.align',\n",
              " 'data/alignments/s1/sgbc6n.align',\n",
              " 'data/alignments/s1/sgbc7s.align',\n",
              " 'data/alignments/s1/sgbc8p.align',\n",
              " 'data/alignments/s1/sgbc9a.align',\n",
              " 'data/alignments/s1/sgbj1s.align',\n",
              " 'data/alignments/s1/sgbj2p.align',\n",
              " 'data/alignments/s1/sgbj3a.align',\n",
              " 'data/alignments/s1/sgbjzn.align',\n",
              " 'data/alignments/s1/sgbp4n.align',\n",
              " 'data/alignments/s1/sgbp5s.align',\n",
              " 'data/alignments/s1/sgbp6p.align',\n",
              " 'data/alignments/s1/sgbp7a.align',\n",
              " 'data/alignments/s1/sgbv8n.align',\n",
              " 'data/alignments/s1/sgbv9s.align',\n",
              " 'data/alignments/s1/sgbx1a.align',\n",
              " 'data/alignments/s1/sgbxzp.align',\n",
              " 'data/alignments/s1/sgib8n.align',\n",
              " 'data/alignments/s1/sgib9s.align',\n",
              " 'data/alignments/s1/sgic1a.align',\n",
              " 'data/alignments/s1/sgiczp.align',\n",
              " 'data/alignments/s1/sgii2n.align',\n",
              " 'data/alignments/s1/sgii3s.align',\n",
              " 'data/alignments/s1/sgii4p.align',\n",
              " 'data/alignments/s1/sgii5a.align',\n",
              " 'data/alignments/s1/sgio6n.align',\n",
              " 'data/alignments/s1/sgio7s.align',\n",
              " 'data/alignments/s1/sgio8p.align',\n",
              " 'data/alignments/s1/sgio9a.align',\n",
              " 'data/alignments/s1/sgiv1s.align',\n",
              " 'data/alignments/s1/sgiv2p.align',\n",
              " 'data/alignments/s1/sgiv3a.align',\n",
              " 'data/alignments/s1/sgivzn.align',\n",
              " 'data/alignments/s1/sgwd1s.align',\n",
              " 'data/alignments/s1/sgwd2p.align',\n",
              " 'data/alignments/s1/sgwd3a.align',\n",
              " 'data/alignments/s1/sgwdzn.align',\n",
              " 'data/alignments/s1/sgwj4n.align',\n",
              " 'data/alignments/s1/sgwj5s.align',\n",
              " 'data/alignments/s1/sgwj6p.align',\n",
              " 'data/alignments/s1/sgwj7a.align',\n",
              " 'data/alignments/s1/sgwp8n.align',\n",
              " 'data/alignments/s1/sgwp9s.align',\n",
              " 'data/alignments/s1/sgwq1a.align',\n",
              " 'data/alignments/s1/sgwqzp.align',\n",
              " 'data/alignments/s1/sgwx2n.align',\n",
              " 'data/alignments/s1/sgwx3s.align',\n",
              " 'data/alignments/s1/sgwx4p.align',\n",
              " 'data/alignments/s1/sgwx5a.align',\n",
              " 'data/alignments/s1/srab1s.align',\n",
              " 'data/alignments/s1/srab2p.align',\n",
              " 'data/alignments/s1/srab3a.align',\n",
              " 'data/alignments/s1/srabzn.align',\n",
              " 'data/alignments/s1/srah4n.align',\n",
              " 'data/alignments/s1/srah5s.align',\n",
              " 'data/alignments/s1/srah6p.align',\n",
              " 'data/alignments/s1/srah7a.align',\n",
              " 'data/alignments/s1/sran8n.align',\n",
              " 'data/alignments/s1/sran9s.align',\n",
              " 'data/alignments/s1/srao1a.align',\n",
              " 'data/alignments/s1/sraozp.align',\n",
              " 'data/alignments/s1/srau2n.align',\n",
              " 'data/alignments/s1/srau3s.align',\n",
              " 'data/alignments/s1/srau4p.align',\n",
              " 'data/alignments/s1/srau5a.align',\n",
              " 'data/alignments/s1/srbb4n.align',\n",
              " 'data/alignments/s1/srbb5s.align',\n",
              " 'data/alignments/s1/srbb6p.align',\n",
              " 'data/alignments/s1/srbb7a.align',\n",
              " 'data/alignments/s1/srbh8n.align',\n",
              " 'data/alignments/s1/srbh9s.align',\n",
              " 'data/alignments/s1/srbi1a.align',\n",
              " 'data/alignments/s1/srbizp.align',\n",
              " 'data/alignments/s1/srbo2n.align',\n",
              " 'data/alignments/s1/srbo3s.align',\n",
              " 'data/alignments/s1/srbo4p.align',\n",
              " 'data/alignments/s1/srbo5a.align',\n",
              " 'data/alignments/s1/srbu6n.align',\n",
              " 'data/alignments/s1/srbu7s.align',\n",
              " 'data/alignments/s1/srbu8p.align',\n",
              " 'data/alignments/s1/srbu9a.align',\n",
              " 'data/alignments/s1/sria6n.align',\n",
              " 'data/alignments/s1/sria7s.align',\n",
              " 'data/alignments/s1/sria8p.align',\n",
              " 'data/alignments/s1/sria9a.align',\n",
              " 'data/alignments/s1/srih1s.align',\n",
              " 'data/alignments/s1/srih2p.align',\n",
              " 'data/alignments/s1/srih3a.align',\n",
              " 'data/alignments/s1/srihzn.align',\n",
              " 'data/alignments/s1/srin4n.align',\n",
              " 'data/alignments/s1/srin5s.align',\n",
              " 'data/alignments/s1/srin6p.align',\n",
              " 'data/alignments/s1/srin7a.align',\n",
              " 'data/alignments/s1/srit8n.align',\n",
              " 'data/alignments/s1/srit9s.align',\n",
              " 'data/alignments/s1/sriu1a.align',\n",
              " 'data/alignments/s1/sriuzp.align',\n",
              " 'data/alignments/s1/srwb8n.align',\n",
              " 'data/alignments/s1/srwb9s.align',\n",
              " 'data/alignments/s1/srwc1a.align',\n",
              " 'data/alignments/s1/srwczp.align',\n",
              " 'data/alignments/s1/srwi2n.align',\n",
              " 'data/alignments/s1/srwi3s.align',\n",
              " 'data/alignments/s1/srwi4p.align',\n",
              " 'data/alignments/s1/srwi5a.align',\n",
              " 'data/alignments/s1/srwo6n.align',\n",
              " 'data/alignments/s1/srwo7s.align',\n",
              " 'data/alignments/s1/srwo8p.align',\n",
              " 'data/alignments/s1/srwo9a.align',\n",
              " 'data/alignments/s1/srwv1s.align',\n",
              " 'data/alignments/s1/srwv2p.align',\n",
              " 'data/alignments/s1/srwv3a.align',\n",
              " 'data/alignments/s1/srwvzn.align',\n",
              " 'data/alignments/s1/swab6n.align',\n",
              " 'data/alignments/s1/swab7s.align',\n",
              " 'data/alignments/s1/swab8p.align',\n",
              " 'data/alignments/s1/swab9a.align',\n",
              " 'data/alignments/s1/swai1s.align',\n",
              " 'data/alignments/s1/swai2p.align',\n",
              " 'data/alignments/s1/swai3a.align',\n",
              " 'data/alignments/s1/swaizn.align',\n",
              " 'data/alignments/s1/swao4n.align',\n",
              " 'data/alignments/s1/swao5s.align',\n",
              " 'data/alignments/s1/swao6p.align',\n",
              " 'data/alignments/s1/swao7a.align',\n",
              " 'data/alignments/s1/swau8n.align',\n",
              " 'data/alignments/s1/swau9s.align',\n",
              " 'data/alignments/s1/swav1a.align',\n",
              " 'data/alignments/s1/swavzp.align',\n",
              " 'data/alignments/s1/swbc1s.align',\n",
              " 'data/alignments/s1/swbc2p.align',\n",
              " 'data/alignments/s1/swbc3a.align',\n",
              " 'data/alignments/s1/swbczn.align',\n",
              " 'data/alignments/s1/swbi4n.align',\n",
              " 'data/alignments/s1/swbi5s.align',\n",
              " 'data/alignments/s1/swbi6p.align',\n",
              " 'data/alignments/s1/swbi7a.align',\n",
              " 'data/alignments/s1/swbo8n.align',\n",
              " 'data/alignments/s1/swbo9s.align',\n",
              " 'data/alignments/s1/swbp1a.align',\n",
              " 'data/alignments/s1/swbpzp.align',\n",
              " 'data/alignments/s1/swbv2n.align',\n",
              " 'data/alignments/s1/swbv3s.align',\n",
              " 'data/alignments/s1/swbv4p.align',\n",
              " 'data/alignments/s1/swbv5a.align',\n",
              " 'data/alignments/s1/swib2n.align',\n",
              " 'data/alignments/s1/swib3s.align',\n",
              " 'data/alignments/s1/swib4p.align',\n",
              " 'data/alignments/s1/swib5a.align',\n",
              " 'data/alignments/s1/swih6n.align',\n",
              " 'data/alignments/s1/swih7s.align',\n",
              " 'data/alignments/s1/swih8p.align',\n",
              " 'data/alignments/s1/swih9a.align',\n",
              " 'data/alignments/s1/swio1s.align',\n",
              " 'data/alignments/s1/swio2p.align',\n",
              " 'data/alignments/s1/swio3a.align',\n",
              " 'data/alignments/s1/swiozn.align',\n",
              " 'data/alignments/s1/swiu4n.align',\n",
              " 'data/alignments/s1/swiu5s.align',\n",
              " 'data/alignments/s1/swiu6p.align',\n",
              " 'data/alignments/s1/swiu7a.align',\n",
              " 'data/alignments/s1/swwc4n.align',\n",
              " 'data/alignments/s1/swwc5s.align',\n",
              " 'data/alignments/s1/swwc6p.align',\n",
              " 'data/alignments/s1/swwc7a.align',\n",
              " 'data/alignments/s1/swwi8n.align',\n",
              " 'data/alignments/s1/swwi9s.align',\n",
              " 'data/alignments/s1/swwj1a.align',\n",
              " 'data/alignments/s1/swwjzp.align',\n",
              " 'data/alignments/s1/swwp2n.align',\n",
              " 'data/alignments/s1/swwp3s.align',\n",
              " 'data/alignments/s1/swwp4p.align',\n",
              " 'data/alignments/s1/swwp5a.align',\n",
              " 'data/alignments/s1/swwv6n.align',\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "url='https://drive.google.com/uc?id=1YlvpDLix3S-U8fd-gqRwPcWXAXm8JwjL'\n",
        "output='data.zip'\n",
        "gdown.download(url,output,quiet=False)\n",
        "gdown.extractall('data.zip')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "YFwoSVmEb_eH"
      },
      "outputs": [],
      "source": [
        "def load_video(path:str)-> List[float]:\n",
        "\n",
        "  cap=cv2.VideoCapture(path)\n",
        "  frames=[]\n",
        "  for _ in range(int(cap.get(cv2.CAP_PROP_FRAME_COUNT))):\n",
        "    ret,frame=cap.read()\n",
        "    frame=tf.image.rgb_to_grayscale(frame)\n",
        "    frames.append(frame[190:236,80:220,:])\n",
        "  cap.release()\n",
        "\n",
        "  mean=tf.math.reduce_mean(frames)\n",
        "  std=tf.math.reduce_std(tf.cast(frames,tf.float32))\n",
        "  return tf.cast((frames-mean),tf.float32)/ std"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "ioK2G9zws2yp"
      },
      "outputs": [],
      "source": [
        "vocab = [x for x in \"abcdefghijklmnopqrstuvwxyz'?!123456789 \"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Y0wYnoMtRT4",
        "outputId": "47991266-e52c-4f53-faf0-3c52dcc19aaa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['a',\n",
              " 'b',\n",
              " 'c',\n",
              " 'd',\n",
              " 'e',\n",
              " 'f',\n",
              " 'g',\n",
              " 'h',\n",
              " 'i',\n",
              " 'j',\n",
              " 'k',\n",
              " 'l',\n",
              " 'm',\n",
              " 'n',\n",
              " 'o',\n",
              " 'p',\n",
              " 'q',\n",
              " 'r',\n",
              " 's',\n",
              " 't',\n",
              " 'u',\n",
              " 'v',\n",
              " 'w',\n",
              " 'x',\n",
              " 'y',\n",
              " 'z',\n",
              " \"'\",\n",
              " '?',\n",
              " '!',\n",
              " '1',\n",
              " '2',\n",
              " '3',\n",
              " '4',\n",
              " '5',\n",
              " '6',\n",
              " '7',\n",
              " '8',\n",
              " '9',\n",
              " ' ']"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "vocab"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GTFW5RQqtUKN",
        "outputId": "76eb3310-a031-4e8a-9ea8-e83c358f4e53"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the vocabulary is:['', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', \"'\", '?', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' '](size =40)\n"
          ]
        }
      ],
      "source": [
        "char_to_num = tf.keras.layers.StringLookup(vocabulary=vocab,oov_token=\"\")\n",
        "num_to_char =tf.keras.layers.StringLookup(vocabulary=char_to_num.get_vocabulary(),oov_token=\"\", invert=True)\n",
        "\n",
        "print(f\"the vocabulary is:{char_to_num.get_vocabulary()}\"\n",
        "      f\"(size ={char_to_num.vocabulary_size()})\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WBjXFwBqy3ls",
        "outputId": "ea3f8072-1fe5-4c1f-a7da-70e613de1c2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['',\n",
              " 'a',\n",
              " 'b',\n",
              " 'c',\n",
              " 'd',\n",
              " 'e',\n",
              " 'f',\n",
              " 'g',\n",
              " 'h',\n",
              " 'i',\n",
              " 'j',\n",
              " 'k',\n",
              " 'l',\n",
              " 'm',\n",
              " 'n',\n",
              " 'o',\n",
              " 'p',\n",
              " 'q',\n",
              " 'r',\n",
              " 's',\n",
              " 't',\n",
              " 'u',\n",
              " 'v',\n",
              " 'w',\n",
              " 'x',\n",
              " 'y',\n",
              " 'z',\n",
              " \"'\",\n",
              " '?',\n",
              " '!',\n",
              " '1',\n",
              " '2',\n",
              " '3',\n",
              " '4',\n",
              " '5',\n",
              " '6',\n",
              " '7',\n",
              " '8',\n",
              " '9',\n",
              " ' ']"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "char_to_num.get_vocabulary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Zy9QNz-uLj7",
        "outputId": "3a815f18-9291-4a94-84c9-1c01a26a681a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(3,), dtype=int64, numpy=array([1, 2, 3])>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ],
      "source": [
        "char_to_num(['a','b','c'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qr6VXBYEvd7A",
        "outputId": "16cbfe3a-3a24-4970-e3fd-f1134d6786b9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(4,), dtype=string, numpy=array([b'a', b'b', b'c', b'd'], dtype=object)>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "num_to_char([1,2,3,4])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "id": "bWixnuZ55LqX"
      },
      "outputs": [],
      "source": [
        "def load_alignments(path:str) -> List[str]:\n",
        "    with open(path, 'r') as f:\n",
        "        lines = f.readlines()\n",
        "    tokens = []\n",
        "    for line in lines:\n",
        "        line = line.split()\n",
        "        if line[2] != 'sil':\n",
        "            tokens = [*tokens,' ',line[2]]\n",
        "    return char_to_num(tf.reshape(tf.strings.unicode_split(tokens, input_encoding='UTF-8'), (-1)))[1:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "id": "XXvx3RKU0XTe"
      },
      "outputs": [],
      "source": [
        "def load_data(path: str):\n",
        "    path = bytes.decode(path.numpy())\n",
        "    file_name = path.split('/')[-1].split('.')[0]\n",
        "    # File name splitting for windows\n",
        "    #file_name = path.split('\\\\')[-1].split('.')[0]\n",
        "    video_path = os.path.join('data','s1',f'{file_name}.mpg')\n",
        "    alignment_path = os.path.join('data','alignments','s1',f'{file_name}.align')\n",
        "    frames = load_video(video_path)\n",
        "    alignments = load_alignments(alignment_path)\n",
        "\n",
        "    return frames, alignments"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "id": "yRhIYcGy1mei"
      },
      "outputs": [],
      "source": [
        "test_path='./data/s1/bbaf2n.mpg'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "3rWw6mWm_HRY",
        "outputId": "887eb44e-8878-420b-cdde-000632fa193c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'bbaf2n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "tf.convert_to_tensor(test_path).numpy().decode('utf-8').split('/')[-1].split('.')[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "id": "59SYKX4o_L6w"
      },
      "outputs": [],
      "source": [
        "frames,alignments=load_data(tf.convert_to_tensor(test_path))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "WudpHiXfHQa8",
        "outputId": "725fdc58-1f26-4369-b4eb-2379f35b5723"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ba0bc50e8f0>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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GE1cRK1Fs0uwjffoiPuwmWei328zQb9Vim282d6FDJguRya5nB82uwT3PArvN48+mwCVUsoL6rGNKX9MJgvkZhcnhpGe4b1hZhf89JYo+C4V4vLbk2NqlxEn+j3B95u3O/ScJkuNzS78HoZH/P85deJzHVPJUTXk4MGD1N3dPfGBiqIoiqLMOvr6+qirq8t6zKybfPi+T4cPHyZjDC1cuJD6+vqoqalp4hPnEMPDw9Td3a19Mw7aN9Fo30SjfTM+2i/RaN+EMcZQJpOhzs5OcifIUTbrzC6u61JXVxcND7+jwGhqatIHG4H2TTTaN9Fo30SjfTM+2i/RaN9ImpubKzpOHU4VRVEURakpOvlQFEVRFKWmzNrJRzKZpL/+67+mJAbHUrRvLGjfRKN9E432zfhov0SjfXNizDqHU0VRFEVRTm1m7cqHoiiKoiinJjr5UBRFURSlpujkQ1EURVGUmqKTD0VRFEVRasqsnXxs2LCBzjrrLEqlUrR8+XLatWvXTDeppqxfv54+8IEPUDqdpvnz59MnPvEJ2rdvnzgmm83SmjVrqK2tjRobG2nVqlU0MDAwQy2eOe68805yHIduueWW8u/mct8cOnSI/viP/5ja2tqorq6O3ve+99GePXvK5cYYuv322+mMM86guro6WrFiBb3yyisz2OLaUCqV6Gtf+xotWrSI6urq6F3vehf9zd/8jchDMVf65qc//SldffXV1NnZSY7j0COPPCLKK+mHo0eP0vXXX09NTU3U0tJCN954I42MjNTwLqYHW98UCgW67bbb6H3vex81NDRQZ2cnffazn6XDhw+LOk7VvplSzCzkoYceMolEwvzLv/yL+eUvf2n+9E//1LS0tJiBgYGZblrNWLlypbn//vvNCy+8YPbu3WuuvPJKs3DhQjMyMlI+5gtf+ILp7u42W7duNXv27DEXX3yx+eAHPziDra49u3btMmeddZY5//zzzc0331z+/Vztm6NHj5ozzzzTfO5znzM7d+40r732mtmyZYt59dVXy8fceeedprm52TzyyCPm5z//ubnmmmvMokWLzPHjx2ew5dPPHXfcYdra2szmzZvN/v37zcaNG01jY6P51re+VT5mrvTNY489Zr761a+aH/zgB4aIzKZNm0R5Jf1w+eWXm/e///1mx44d5mc/+5l597vfba677roa38nUY+ubwcFBs2LFCvP973/fvPTSS2b79u1m2bJlZsmSJaKOU7VvppJZOflYtmyZWbNmTXm/VCqZzs5Os379+hls1cxy5MgRQ0Rm27Ztxph3XoJ4PG42btxYPuZXv/qVISKzffv2mWpmTclkMuacc84xTzzxhPnIRz5SnnzM5b657bbbzIc+9KHIct/3TUdHh/n7v//78u8GBwdNMpk0//Ef/1GLJs4YV111lfmTP/kT8btrr73WXH/99caYuds3+Ae2kn548cUXDRGZ3bt3l4/5yU9+YhzHMYcOHapZ26eb8SZmyK5duwwRmddff90YM3f65kSZdWaXfD5Pvb29tGLFivLvXNelFStW0Pbt22ewZTPL0NAQERG1trYSEVFvby8VCgXRT4sXL6aFCxfOmX5as2YNXXXVVaIPiOZ23/zoRz+ipUuX0h/+4R/S/Pnz6cILL6Tvfve75fL9+/dTf3+/6Jvm5mZavnz5Kd83H/zgB2nr1q308ssvExHRz3/+c3rmmWfoiiuuIKK53TecSvph+/bt1NLSQkuXLi0fs2LFCnJdl3bu3FnzNs8kQ0ND5DgOtbS0EJH2TaXMusRyb731FpVKJWpvbxe/b29vp5deemmGWjWz+L5Pt9xyC11yySV03nnnERFRf38/JRKJ8oD/Le3t7dTf3z8DrawtDz30ED377LO0e/fuUNlc7pvXXnuN7rnnHlq7di395V/+Je3evZv+/M//nBKJBK1evbp8/+O9X6d633zlK1+h4eFhWrx4MXmeR6VSie644w66/vrriYjmdN9wKumH/v5+mj9/viiPxWLU2to6p/oqm83SbbfdRtddd105uZz2TWXMusmHEmbNmjX0wgsv0DPPPDPTTZkV9PX10c0330xPPPEEpVKpmW7OrML3fVq6dCn97d/+LRERXXjhhfTCCy/QvffeS6tXr57h1s0sDz/8MH3ve9+jBx98kN773vfS3r176ZZbbqHOzs453zdK9RQKBfqjP/ojMsbQPffcM9PNOemYdWaXefPmked5IWXCwMAAdXR0zFCrZo6bbrqJNm/eTE899RR1dXWVf9/R0UH5fJ4GBwfF8XOhn3p7e+nIkSN00UUXUSwWo1gsRtu2baNvf/vbFIvFqL29fc72zRlnnEHvec97xO/OPfdcOnDgABFR+f7n4vv1F3/xF/SVr3yFPv3pT9P73vc++sxnPkO33norrV+/nojmdt9wKumHjo4OOnLkiCgvFot09OjROdFXv514vP766/TEE0+UVz2ItG8qZdZNPhKJBC1ZsoS2bt1a/p3v+7R161bq6emZwZbVFmMM3XTTTbRp0yZ68sknadGiRaJ8yZIlFI/HRT/t27ePDhw4cMr302WXXUbPP/887d27t/yzdOlSuv7668vbc7VvLrnkkpAk++WXX6YzzzyTiIgWLVpEHR0dom+Gh4dp586dp3zfjI2NkevKT57neeT7PhHN7b7hVNIPPT09NDg4SL29veVjnnzySfJ9n5YvX17zNteS3048XnnlFfqv//ovamtrE+VzuW+qYqY9XsfjoYceMslk0jzwwAPmxRdfNJ///OdNS0uL6e/vn+mm1YwvfvGLprm52Tz99NPmjTfeKP+MjY2Vj/nCF75gFi5caJ588kmzZ88e09PTY3p6emaw1TMHV7sYM3f7ZteuXSYWi5k77rjDvPLKK+Z73/ueqa+vN//+7/9ePubOO+80LS0t5oc//KH5xS9+YT7+8Y+fknJSZPXq1WbBggVlqe0PfvADM2/ePPPlL3+5fMxc6ZtMJmOee+4589xzzxkiMv/wD/9gnnvuubJio5J+uPzyy82FF15odu7caZ555hlzzjnnnBJyUlvf5PN5c80115iuri6zd+9e8W3O5XLlOk7VvplKZuXkwxhj/vEf/9EsXLjQJBIJs2zZMrNjx46ZblJNIaJxf+6///7yMcePHzd/9md/Zk477TRTX19vPvnJT5o33nhj5ho9g+DkYy73zaOPPmrOO+88k0wmzeLFi80///M/i3Lf983XvvY1097ebpLJpLnsssvMvn37Zqi1tWN4eNjcfPPNZuHChSaVSpmzzz7bfPWrXxV/NOZK3zz11FPjfl9Wr15tjKmsH95++21z3XXXmcbGRtPU1GRuuOEGk8lkZuBuphZb3+zfvz/y2/zUU0+V6zhV+2YqcYxh4f0URVEURVGmmVnn86EoiqIoyqmNTj4URVEURakpOvlQFEVRFKWm6ORDURRFUZSaopMPRVEURVFqik4+FEVRFEWpKTr5UBRFURSlpujkQ1EURVGUmqKTD0VRFEVRaopOPhRFURRFqSk6+VAURVEUpabo5ENRFEVRlJry/wFtQdEMI35gDwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.imshow(frames[50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tBoODCl9BXBC",
        "outputId": "49422821-5e5d-4686-dc35-ef32bca97223"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(21,), dtype=int64, numpy=\n",
              "array([ 2,  9, 14, 39,  2, 12, 21,  5, 39,  1, 20, 39,  6, 39, 20, 23, 15,\n",
              "       39, 14, 15, 23])>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ],
      "source": [
        "alignments"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "taete4QRCeE1",
        "outputId": "23fb652d-1126-4dff-cf65-774fe4bd927f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(b'bin blue at f two now', shape=(), dtype=string)\n"
          ]
        }
      ],
      "source": [
        "print(tf.strings.reduce_join([bytes.decode(x) for x in num_to_char(alignments.numpy()).numpy()]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PqzHYieJHt-i",
        "outputId": "f7e0d921-272a-4fcf-e115-fc428f29814d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(b'bin blue at f two now', shape=(), dtype=string)\n"
          ]
        }
      ],
      "source": [
        "print(tf.strings.reduce_join([bytes.decode(x) for x in num_to_char(alignments.numpy()).numpy()]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "id": "-7jnjPLDKML6"
      },
      "outputs": [],
      "source": [
        "def mappable_function(path:str)-> List[str]:\n",
        "  result=tf.py_function(load_data,[path],(tf.float32,tf.int64))\n",
        "  return result"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7ODrfsLkmHUP"
      },
      "source": [
        "2. Create Data Pipeline:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "id": "RQpi6hRLmNgQ"
      },
      "outputs": [],
      "source": [
        "from matplotlib import pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "id": "cAuyCkEundwB"
      },
      "outputs": [],
      "source": [
        "data=tf.data.Dataset.list_files('./data/s1/*.mpg')\n",
        "data=data.shuffle(500,reshuffle_each_iteration=False)\n",
        "data=data.map(mappable_function)\n",
        "data=data.padded_batch(2,padded_shapes=([75,None,None,None],[40]))\n",
        "data=data.prefetch(tf.data.AUTOTUNE)\n",
        "train=data.take(450)\n",
        "test=data.skip(450)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s2d8rD-0eZd7",
        "outputId": "281edd2f-ca3b-43ef-e7e1-4347f2ee392a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "50"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ],
      "source": [
        "len(test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "5Rpa_mAVn9MM"
      },
      "outputs": [],
      "source": [
        "frames,alignments = data.as_numpy_iterator().next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2IP6z2UKoWAJ",
        "outputId": "c059da06-4062-4b1f-cc52-f6e77255ec33"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [ 0.        ],\n",
              "          [ 0.        ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [ 0.        ],\n",
              "          [ 0.        ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]],\n",
              "\n",
              "         [[ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]],\n",
              "\n",
              "         [[ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.4419804 ],\n",
              "          [ 1.4419804 ],\n",
              "          [ 1.318382  ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4419804 ],\n",
              "          [ 1.4419804 ],\n",
              "          [ 1.318382  ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.505857  ],\n",
              "          [10.464658  ],\n",
              "          [10.464658  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.25866   ],\n",
              "          [10.25866   ],\n",
              "          [10.25866   ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.318382  ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4419804 ],\n",
              "          [ 1.4419804 ],\n",
              "          [ 1.3595815 ],\n",
              "          ...,\n",
              "          [ 0.        ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.505857  ],\n",
              "          [10.464658  ],\n",
              "          [10.464658  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.25866   ],\n",
              "          [10.25866   ],\n",
              "          [10.25866   ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]]],\n",
              "\n",
              "\n",
              "        ...,\n",
              "\n",
              "\n",
              "        [[[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.505857  ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.505857  ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.464658  ],\n",
              "          [10.464658  ],\n",
              "          [10.464658  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.176262  ],\n",
              "          [10.176262  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.176262  ],\n",
              "          [10.135062  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.94758713],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.135062  ],\n",
              "          [10.135062  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.4419804 ],\n",
              "          [ 1.4419804 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.423458  ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4419804 ],\n",
              "          [ 1.4419804 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.423458  ],\n",
              "          [10.505857  ],\n",
              "          [10.505857  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.464658  ],\n",
              "          [10.464658  ],\n",
              "          [10.464658  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.135062  ],\n",
              "          [10.176262  ],\n",
              "          [10.176262  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.176262  ],\n",
              "          [10.135062  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.135062  ],\n",
              "          [10.135062  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.3595815 ],\n",
              "          ...,\n",
              "          [10.423458  ],\n",
              "          [10.423458  ],\n",
              "          [10.423458  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.3595815 ],\n",
              "          ...,\n",
              "          [10.423458  ],\n",
              "          [10.423458  ],\n",
              "          [10.423458  ]],\n",
              "\n",
              "         [[ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          [ 1.4007809 ],\n",
              "          ...,\n",
              "          [10.464658  ],\n",
              "          [10.464658  ],\n",
              "          [10.423458  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.176262  ],\n",
              "          [10.217461  ],\n",
              "          [10.217461  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.176262  ],\n",
              "          [10.176262  ]],\n",
              "\n",
              "         [[ 0.9887866 ],\n",
              "          [ 0.94758713],\n",
              "          [ 0.9063877 ],\n",
              "          ...,\n",
              "          [10.217461  ],\n",
              "          [10.135062  ],\n",
              "          [10.135062  ]]]],\n",
              "\n",
              "\n",
              "\n",
              "       [[[[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.332463  ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.332463  ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.11103859],\n",
              "          [ 0.11103859]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.8883087 ],\n",
              "          [ 0.8883087 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ]],\n",
              "\n",
              "         [[ 0.8883087 ],\n",
              "          [ 0.8883087 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.8883087 ],\n",
              "          [ 0.8883087 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.8883087 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.290228  ],\n",
              "          [ 9.290228  ]],\n",
              "\n",
              "         [[ 0.8883087 ],\n",
              "          [ 0.8883087 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ]],\n",
              "\n",
              "         [[ 0.8883087 ],\n",
              "          [ 0.8883087 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          [ 1.2214245 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ],\n",
              "          [ 9.253216  ]],\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.8883087 ],\n",
              "          ...,\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.8883087 ],\n",
              "          ...,\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]]],\n",
              "\n",
              "\n",
              "        ...,\n",
              "\n",
              "\n",
              "        [[[ 1.3694758 ],\n",
              "          [ 1.3694758 ],\n",
              "          [ 1.3694758 ],\n",
              "          ...,\n",
              "          [ 0.03701286],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          ...,\n",
              "          [ 0.03701286],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          [ 0.9253215 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.3694758 ],\n",
              "          [ 1.3694758 ],\n",
              "          [ 1.3694758 ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.290228  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]]],\n",
              "\n",
              "\n",
              "        [[[ 1.332463  ],\n",
              "          [ 1.332463  ],\n",
              "          [ 1.3694758 ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.332463  ],\n",
              "          ...,\n",
              "          [ 0.11103859],\n",
              "          [ 0.03701286],\n",
              "          [ 0.03701286]],\n",
              "\n",
              "         [[ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          [ 1.2954502 ],\n",
              "          ...,\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572],\n",
              "          [ 0.07402572]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]],\n",
              "\n",
              "         [[ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          [ 0.8512958 ],\n",
              "          ...,\n",
              "          [ 9.253216  ],\n",
              "          [ 9.216203  ],\n",
              "          [ 9.216203  ]]]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ],
      "source": [
        "frames"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PNaHU23powpK",
        "outputId": "6bbac772-a80e-4611-ab5f-f7585bf5ffc4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[16, 12,  1,  3,  5, 39, 23,  8,  9, 20,  5, 39, 23,  9, 20,  8,\n",
              "        39, 25, 39,  6,  9, 22,  5, 39,  1,  7,  1,  9, 14,  0,  0,  0,\n",
              "         0,  0,  0,  0,  0,  0,  0,  0],\n",
              "       [19,  5, 20, 39, 19, 16, 39,  2, 12, 21,  5, 39, 23,  9, 20,  8,\n",
              "        39,  2, 39, 20,  8, 18,  5,  5, 39, 19, 15, 15, 14,  0,  0,  0,\n",
              "         0,  0,  0,  0,  0,  0,  0,  0]])"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ],
      "source": [
        "alignments"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JHNTDJscozEn",
        "outputId": "be996305-6eca-4782-b687-2571a10cff32"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ],
      "source": [
        "#plt.imshow(frames[0])\n",
        "len(frames)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "lHvxv7euqRE9"
      },
      "outputs": [],
      "source": [
        "test=data.as_numpy_iterator()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-alp1lHZqcjF",
        "outputId": "ff5d2317-fe14-4dea-b48f-4253d28b1d3a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[[1.360913  ],\n",
              "          [1.360913  ],\n",
              "          [1.3220298 ],\n",
              "          ...,\n",
              "          [0.31106582],\n",
              "          [0.19441614],\n",
              "          [0.19441614]],\n",
              "\n",
              "         [[1.360913  ],\n",
              "          [1.360913  ],\n",
              "          [1.3220298 ],\n",
              "          ...,\n",
              "          [0.31106582],\n",
              "          [0.19441614],\n",
              "          [0.19441614]],\n",
              "\n",
              "         [[1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.75969   ],\n",
              "          [9.75969   ]],\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.75969   ],\n",
              "          [9.75969   ]],\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.681924  ],\n",
              "          [9.681924  ]]],\n",
              "\n",
              "\n",
              "        [[[1.360913  ],\n",
              "          [1.360913  ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         [[1.360913  ],\n",
              "          [1.360913  ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         [[1.2442633 ],\n",
              "          [1.2442633 ],\n",
              "          [1.2442633 ],\n",
              "          ...,\n",
              "          [0.15553291],\n",
              "          [0.07776646],\n",
              "          [0.07776646]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.75969   ],\n",
              "          [9.7985735 ],\n",
              "          [9.681924  ]],\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.604157  ],\n",
              "          [9.75969   ],\n",
              "          [9.75969   ]],\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.565274  ],\n",
              "          [9.681924  ],\n",
              "          [9.681924  ]]],\n",
              "\n",
              "\n",
              "        [[[1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.07776646],\n",
              "          [0.07776646]],\n",
              "\n",
              "         [[1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.07776646],\n",
              "          [0.07776646]],\n",
              "\n",
              "         [[1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          [1.2831465 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          ...,\n",
              "          [9.7985735 ],\n",
              "          [9.837457  ],\n",
              "          [9.720807  ]],\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.75969   ],\n",
              "          [9.75969   ]],\n",
              "\n",
              "         [[0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.604157  ],\n",
              "          [9.681924  ],\n",
              "          [9.681924  ]]],\n",
              "\n",
              "\n",
              "        ...,\n",
              "\n",
              "\n",
              "        [[[1.3997962 ],\n",
              "          [1.3997962 ],\n",
              "          [1.360913  ],\n",
              "          ...,\n",
              "          [0.07776646],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         [[1.3997962 ],\n",
              "          [1.3997962 ],\n",
              "          [1.360913  ],\n",
              "          ...,\n",
              "          [0.07776646],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         [[1.3220298 ],\n",
              "          [1.3220298 ],\n",
              "          [1.3220298 ],\n",
              "          ...,\n",
              "          [0.23329937],\n",
              "          [0.19441614],\n",
              "          [0.19441614]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9720807 ],\n",
              "          ...,\n",
              "          [9.7985735 ],\n",
              "          [9.837457  ],\n",
              "          [9.837457  ]],\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9720807 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.720807  ],\n",
              "          [9.7985735 ]],\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          ...,\n",
              "          [9.604157  ],\n",
              "          [9.720807  ],\n",
              "          [9.720807  ]]],\n",
              "\n",
              "\n",
              "        [[[1.4386795 ],\n",
              "          [1.4386795 ],\n",
              "          [1.360913  ],\n",
              "          ...,\n",
              "          [0.11664969],\n",
              "          [0.15553291],\n",
              "          [0.23329937]],\n",
              "\n",
              "         [[1.4386795 ],\n",
              "          [1.4386795 ],\n",
              "          [1.360913  ],\n",
              "          ...,\n",
              "          [0.11664969],\n",
              "          [0.15553291],\n",
              "          [0.23329937]],\n",
              "\n",
              "         [[1.3220298 ],\n",
              "          [1.3220298 ],\n",
              "          [1.3220298 ],\n",
              "          ...,\n",
              "          [0.19441614],\n",
              "          [0.11664969],\n",
              "          [0.11664969]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          ...,\n",
              "          [9.87634   ],\n",
              "          [9.837457  ],\n",
              "          [9.837457  ]],\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.720807  ],\n",
              "          [9.7985735 ]],\n",
              "\n",
              "         [[0.9331975 ],\n",
              "          [0.9331975 ],\n",
              "          [0.8943142 ],\n",
              "          ...,\n",
              "          [9.604157  ],\n",
              "          [9.720807  ],\n",
              "          [9.720807  ]]],\n",
              "\n",
              "\n",
              "        [[[1.5164459 ],\n",
              "          [1.5164459 ],\n",
              "          [1.4386795 ],\n",
              "          ...,\n",
              "          [0.15553291],\n",
              "          [0.15553291],\n",
              "          [0.15553291]],\n",
              "\n",
              "         [[1.5164459 ],\n",
              "          [1.5164459 ],\n",
              "          [1.4386795 ],\n",
              "          ...,\n",
              "          [0.15553291],\n",
              "          [0.15553291],\n",
              "          [0.15553291]],\n",
              "\n",
              "         [[1.360913  ],\n",
              "          [1.360913  ],\n",
              "          [1.360913  ],\n",
              "          ...,\n",
              "          [0.07776646],\n",
              "          [0.07776646],\n",
              "          [0.19441614]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.9720807 ],\n",
              "          [0.9720807 ],\n",
              "          [0.9720807 ],\n",
              "          ...,\n",
              "          [0.        ],\n",
              "          [9.837457  ],\n",
              "          [9.7985735 ]],\n",
              "\n",
              "         [[0.9720807 ],\n",
              "          [0.9720807 ],\n",
              "          [0.9720807 ],\n",
              "          ...,\n",
              "          [9.75969   ],\n",
              "          [9.720807  ],\n",
              "          [9.720807  ]],\n",
              "\n",
              "         [[0.9720807 ],\n",
              "          [0.9720807 ],\n",
              "          [0.9331975 ],\n",
              "          ...,\n",
              "          [9.643041  ],\n",
              "          [9.720807  ],\n",
              "          [9.720807  ]]]],\n",
              "\n",
              "\n",
              "\n",
              "       [[[[1.4611986 ],\n",
              "          [1.4611986 ],\n",
              "          [1.4237319 ],\n",
              "          ...,\n",
              "          [0.56199944],\n",
              "          [0.29973304],\n",
              "          [8.954524  ]],\n",
              "\n",
              "         [[1.4611986 ],\n",
              "          [1.4611986 ],\n",
              "          [1.4237319 ],\n",
              "          ...,\n",
              "          [0.48706618],\n",
              "          [9.254257  ],\n",
              "          [8.692258  ]],\n",
              "\n",
              "         [[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [9.216791  ],\n",
              "          [9.254257  ],\n",
              "          [9.216791  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.07493326],\n",
              "          [0.03746663]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.        ],\n",
              "          [9.55399   ]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.        ],\n",
              "          [9.55399   ],\n",
              "          [9.55399   ]]],\n",
              "\n",
              "\n",
              "        [[[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3487986 ],\n",
              "          ...,\n",
              "          [0.7867992 ],\n",
              "          [0.41213292],\n",
              "          [8.954524  ]],\n",
              "\n",
              "         [[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3487986 ],\n",
              "          ...,\n",
              "          [0.41213292],\n",
              "          [9.104391  ],\n",
              "          [8.879591  ]],\n",
              "\n",
              "         [[1.311332  ],\n",
              "          [1.311332  ],\n",
              "          [1.311332  ],\n",
              "          ...,\n",
              "          [9.291724  ],\n",
              "          [9.179324  ],\n",
              "          [9.254257  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.07493326],\n",
              "          [0.03746663]],\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.03746663],\n",
              "          [0.        ]],\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.        ],\n",
              "          [0.        ],\n",
              "          [0.        ]]],\n",
              "\n",
              "\n",
              "        [[[1.4237319 ],\n",
              "          [1.4237319 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [0.7867992 ],\n",
              "          [0.29973304],\n",
              "          [9.029458  ]],\n",
              "\n",
              "         [[1.4237319 ],\n",
              "          [1.4237319 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [0.29973304],\n",
              "          [9.066924  ],\n",
              "          [8.917058  ]],\n",
              "\n",
              "         [[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [9.254257  ],\n",
              "          [9.179324  ],\n",
              "          [9.291724  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.03746663],\n",
              "          [0.        ]],\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [0.        ],\n",
              "          [0.        ],\n",
              "          [9.55399   ]],\n",
              "\n",
              "         [[0.89919907],\n",
              "          [0.97413236],\n",
              "          [0.97413236],\n",
              "          ...,\n",
              "          [9.55399   ],\n",
              "          [9.55399   ],\n",
              "          [9.55399   ]]],\n",
              "\n",
              "\n",
              "        ...,\n",
              "\n",
              "\n",
              "        [[[1.4611986 ],\n",
              "          [1.4611986 ],\n",
              "          [1.4237319 ],\n",
              "          ...,\n",
              "          [0.56199944],\n",
              "          [0.41213292],\n",
              "          [8.879591  ]],\n",
              "\n",
              "         [[1.4237319 ],\n",
              "          [1.4237319 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [0.3746663 ],\n",
              "          [9.32919   ],\n",
              "          [8.917058  ]],\n",
              "\n",
              "         [[1.311332  ],\n",
              "          [1.311332  ],\n",
              "          [1.2738653 ],\n",
              "          ...,\n",
              "          [9.179324  ],\n",
              "          [9.366657  ],\n",
              "          [9.404124  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.03746663],\n",
              "          [0.03746663]],\n",
              "\n",
              "         [[0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.        ],\n",
              "          [0.        ]],\n",
              "\n",
              "         [[0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.        ],\n",
              "          [9.55399   ]]],\n",
              "\n",
              "\n",
              "        [[[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [0.56199944],\n",
              "          [0.33719966],\n",
              "          [8.879591  ]],\n",
              "\n",
              "         [[1.311332  ],\n",
              "          [1.311332  ],\n",
              "          [1.311332  ],\n",
              "          ...,\n",
              "          [0.18733315],\n",
              "          [9.029458  ],\n",
              "          [8.954524  ]],\n",
              "\n",
              "         [[1.3487986 ],\n",
              "          [1.3487986 ],\n",
              "          [1.311332  ],\n",
              "          ...,\n",
              "          [9.216791  ],\n",
              "          [9.291724  ],\n",
              "          [9.366657  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.07493326],\n",
              "          [0.07493326]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.        ],\n",
              "          [0.        ]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.        ],\n",
              "          [9.55399   ]]],\n",
              "\n",
              "\n",
              "        [[[1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          [1.3862653 ],\n",
              "          ...,\n",
              "          [0.56199944],\n",
              "          [0.18733315],\n",
              "          [8.879591  ]],\n",
              "\n",
              "         [[1.311332  ],\n",
              "          [1.311332  ],\n",
              "          [1.311332  ],\n",
              "          ...,\n",
              "          [0.11239988],\n",
              "          [8.954524  ],\n",
              "          [8.991991  ]],\n",
              "\n",
              "         [[1.3487986 ],\n",
              "          [1.3487986 ],\n",
              "          [1.3487986 ],\n",
              "          ...,\n",
              "          [9.104391  ],\n",
              "          [9.404124  ],\n",
              "          [9.404124  ]],\n",
              "\n",
              "         ...,\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.03746663],\n",
              "          [0.03746663]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.07493326],\n",
              "          [0.        ],\n",
              "          [0.        ]],\n",
              "\n",
              "         [[0.97413236],\n",
              "          [0.97413236],\n",
              "          [0.9366657 ],\n",
              "          ...,\n",
              "          [0.03746663],\n",
              "          [0.        ],\n",
              "          [9.55399   ]]]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ],
      "source": [
        "val=test.next();val[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WjyaXyZocYtG",
        "outputId": "caebfe29-f851-426f-f40d-c6f5cc70e1d6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function imageio.v2.mimwrite(uri, ims, format=None, **kwargs)>"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ],
      "source": [
        "imageio.mimsave"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "wwRqpCy_GSUM",
        "outputId": "fb87fc70-dad1-466b-844c-94cf8d51b1d6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ba0b450ab00>"
            ]
          },
          "metadata": {},
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.imshow(val[0][0][35])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8QCDH_4ltoMg",
        "outputId": "9cb15257-6bb2-4a76-8e0f-f9028e8a1d3b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(), dtype=string, numpy=b'lay blue with k nine soon'>"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ],
      "source": [
        "tf.strings.reduce_join([num_to_char(word) for word in val[1][0]])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cgOp37VjPAqY"
      },
      "source": [
        "3. Design the Deep Neural Network:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {
        "id": "1qnHgq6_PF-T"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv3D, LSTM, Dense, Dropout, Bidirectional, MaxPool3D, Activation, Reshape, SpatialDropout3D, BatchNormalization, TimeDistributed, Flatten\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bRuObl12Qqol",
        "outputId": "9f4b57ef-e4ef-4fea-f5cc-5fa9fde82450"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(75, 46, 140, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ],
      "source": [
        "data.as_numpy_iterator().next()[0][0].shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {
        "id": "Q6xjyWQaRlCG"
      },
      "outputs": [],
      "source": [
        "model = Sequential()\n",
        "model.add(Conv3D(128, 3, input_shape=(75,46,140,1), padding='same'))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPool3D((1,2,2)))\n",
        "\n",
        "model.add(Conv3D(256, 3, padding='same'))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPool3D((1,2,2)))\n",
        "\n",
        "model.add(Conv3D(75, 3, padding='same'))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPool3D((1,2,2)))\n",
        "\n",
        "model.add(TimeDistributed(Flatten()))\n",
        "\n",
        "model.add(Bidirectional(LSTM(128, kernel_initializer='Orthogonal', return_sequences=True)))\n",
        "model.add(Dropout(.5))\n",
        "\n",
        "model.add(Bidirectional(LSTM(128, kernel_initializer='Orthogonal', return_sequences=True)))\n",
        "model.add(Dropout(.5))\n",
        "\n",
        "model.add(Dense(char_to_num.vocabulary_size()+1, kernel_initializer='he_normal', activation='softmax'))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QpdWchieS0K-",
        "outputId": "6c9834bb-9ca8-4da0-bd53-d2e80aa4b04b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv3d_3 (Conv3D)           (None, 75, 46, 140, 128   3584      \n",
            "                             )                                   \n",
            "                                                                 \n",
            " activation_3 (Activation)   (None, 75, 46, 140, 128   0         \n",
            "                             )                                   \n",
            "                                                                 \n",
            " max_pooling3d_3 (MaxPoolin  (None, 75, 23, 70, 128)   0         \n",
            " g3D)                                                            \n",
            "                                                                 \n",
            " conv3d_4 (Conv3D)           (None, 75, 23, 70, 256)   884992    \n",
            "                                                                 \n",
            " activation_4 (Activation)   (None, 75, 23, 70, 256)   0         \n",
            "                                                                 \n",
            " max_pooling3d_4 (MaxPoolin  (None, 75, 11, 35, 256)   0         \n",
            " g3D)                                                            \n",
            "                                                                 \n",
            " conv3d_5 (Conv3D)           (None, 75, 11, 35, 75)    518475    \n",
            "                                                                 \n",
            " activation_5 (Activation)   (None, 75, 11, 35, 75)    0         \n",
            "                                                                 \n",
            " max_pooling3d_5 (MaxPoolin  (None, 75, 5, 17, 75)     0         \n",
            " g3D)                                                            \n",
            "                                                                 \n",
            " time_distributed_1 (TimeDi  (None, 75, 6375)          0         \n",
            " stributed)                                                      \n",
            "                                                                 \n",
            " bidirectional_2 (Bidirecti  (None, 75, 256)           6660096   \n",
            " onal)                                                           \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 75, 256)           0         \n",
            "                                                                 \n",
            " bidirectional_3 (Bidirecti  (None, 75, 256)           394240    \n",
            " onal)                                                           \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 75, 256)           0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 75, 41)            10537     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 8471924 (32.32 MB)\n",
            "Trainable params: 8471924 (32.32 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AAAsbwvyS4k4",
        "outputId": "5e906ce1-ed47-4f99-8d1e-1127840793eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 2s 2s/step\n"
          ]
        }
      ],
      "source": [
        "yhat=model.predict(val[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3dyLOuC4URW4",
        "outputId": "d765eb4f-a24f-4f2e-ff2c-af15cebb1d10"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(), dtype=string, numpy=b'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'>"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ],
      "source": [
        "tf.strings.reduce_join([num_to_char(x) for x in tf.argmax(yhat[0],axis=1)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YpLkb8BPT6nJ",
        "outputId": "e1a0285f-80d7-4ef4-e741-861e0355df9d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(), dtype=string, numpy=b'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ],
      "source": [
        "tf.strings.reduce_join([num_to_char(x) for x in tf.argmax(yhat[0],axis=1)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HKIQFi2SUnXT",
        "outputId": "eaf8a046-d9fa-4f15-85a5-6597d439df6a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(None, 75, 46, 140, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ],
      "source": [
        "model.input_shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EXx0dINwUx8W",
        "outputId": "9bf02ce5-2d32-4feb-940c-5f88d3edd6a0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(None, 75, 41)"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ],
      "source": [
        "model.output_shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dPsPpvpjVRXW"
      },
      "source": [
        "4.Setup training options and train:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "id": "ft-xK9DGU2Kc"
      },
      "outputs": [],
      "source": [
        "def scheduler(epoch, lr):\n",
        "    if epoch < 30:\n",
        "        return lr\n",
        "    else:\n",
        "        return lr * tf.math.exp(-0.1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "id": "yX7QQ3PgWEhz"
      },
      "outputs": [],
      "source": [
        "def CTCLoss(y_true, y_pred):\n",
        "    batch_len = tf.cast(tf.shape(y_true)[0], dtype=\"int64\")\n",
        "    input_length = tf.cast(tf.shape(y_pred)[1], dtype=\"int64\")\n",
        "    label_length = tf.cast(tf.shape(y_true)[1], dtype=\"int64\")\n",
        "\n",
        "    input_length = input_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "    label_length = label_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "\n",
        "    loss = tf.keras.backend.ctc_batch_cost(y_true, y_pred, input_length, label_length)\n",
        "    return loss"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {
        "id": "MmPfc0RMWi-_"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "class ProduceExample(tf.keras.callbacks.Callback):\n",
        "    def __init__(self, dataset) -> None:\n",
        "        self.dataset = dataset.as_numpy_iterator()\n",
        "\n",
        "    def on_epoch_end(self, epoch, logs=None) -> None:\n",
        "        data = self.dataset.next()\n",
        "        yhat = self.model.predict(data[0])\n",
        "        decoded = tf.keras.backend.ctc_decode(yhat, [75,75], greedy=False)[0][0].numpy()\n",
        "        for x in range(len(yhat)):\n",
        "            print('Original:', tf.strings.reduce_join(num_to_char(data[1][x])).numpy().decode('utf-8'))\n",
        "            print('Prediction:', tf.strings.reduce_join(num_to_char(decoded[x])).numpy().decode('utf-8'))\n",
        "            print('~'*100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {
        "id": "wcNfXGxMXGSc"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss=CTCLoss)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "id": "c7X0W1BVXQoj"
      },
      "outputs": [],
      "source": [
        "checkpoint_callback = ModelCheckpoint(os.path.join('models','checkpoint'), monitor='loss', save_weights_only=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "id": "TDuBRTH1cv39"
      },
      "outputs": [],
      "source": [
        "schedule_callback = LearningRateScheduler(scheduler)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "id": "M55XHz-XcwAL"
      },
      "outputs": [],
      "source": [
        "example_callback = ProduceExample(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jJ8keWceRjBt",
        "outputId": "4ff5cf80-f6df-422f-9783-23905a63717b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 2s 2s/step\n",
            "Original: bin red in f five soon\n",
            "Prediction: le e e e o\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "Original: lay white by z seven again\n",
            "Prediction: le e e e eo\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "450/450 [==============================] - 795s 2s/step - loss: 84.5505 - val_loss: 69.8672 - lr: 1.0000e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7ba0ac3b3820>"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ],
      "source": [
        " model.fit(train, validation_data=test, epochs=1, callbacks=[checkpoint_callback, schedule_callback, example_callback])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XI0jCOwc5dFh"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MUjPBLTvgtvi"
      },
      "source": [
        "5.Make Predictions and Test Time:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {
        "id": "0F9n1GqXxq1X"
      },
      "outputs": [],
      "source": [
        "test_data = data.as_numpy_iterator()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "id": "SbHyLkCtxtGV"
      },
      "outputs": [],
      "source": [
        "sample = test_data.next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 115,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ImyDFmAsxuxq",
        "outputId": "e27a561b-6ed7-4d56-e0f6-2f3232dcf929"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 241ms/step\n"
          ]
        }
      ],
      "source": [
        "hat = model.predict(sample[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kQmZrLQoxwkc",
        "outputId": "2e77d286-b614-4ea2-f28f-e62770ec8d1b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ REAL TEXT\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<tf.Tensor: shape=(), dtype=string, numpy=b'place white with k five soon'>,\n",
              " <tf.Tensor: shape=(), dtype=string, numpy=b'lay white with s seven again'>]"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ],
      "source": [
        "print('~'*100, 'REAL TEXT')\n",
        "[tf.strings.reduce_join([num_to_char(word) for word in sentence]) for sentence in sample[1]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "id": "mAV1xrPpxyCa"
      },
      "outputs": [],
      "source": [
        "decoded = tf.keras.backend.ctc_decode(yhat, input_length=[75,75], greedy=True)[0][0].numpy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xmWw95TRx02x",
        "outputId": "cf9b401a-373d-4e92-a2a8-ceb30e19d422"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PREDICTIONS\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<tf.Tensor: shape=(), dtype=string, numpy=b'e'>,\n",
              " <tf.Tensor: shape=(), dtype=string, numpy=b'e'>]"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ],
      "source": [
        "print('~'*100, 'PREDICTIONS')\n",
        "[tf.strings.reduce_join([num_to_char(word) for word in sentence]) for sentence in decoded]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7vCYf01Tx9Rc"
      },
      "source": [
        "Test on a Video:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "id": "P0BJw4CUyCu6"
      },
      "outputs": [],
      "source": [
        "sample = load_data(tf.convert_to_tensor('/content/data/s1/bras9a.mpg'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nqza-KxjyFmx",
        "outputId": "294e72f9-c8b4-4bdc-dccf-ff4b96fa68f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ REAL TEXT\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<tf.Tensor: shape=(), dtype=string, numpy=b'bin red at s nine again'>]"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ],
      "source": [
        "print('~'*100, 'REAL TEXT')\n",
        "[tf.strings.reduce_join([num_to_char(word) for word in sentence]) for sentence in [sample[1]]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YvEDXXP_yHwI",
        "outputId": "07f18775-add0-40ef-e2c3-67673a93b1bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 765ms/step\n"
          ]
        }
      ],
      "source": [
        "yhat = model.predict(tf.expand_dims(sample[0], axis=0))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 122,
      "metadata": {
        "id": "jmZ9U5EVyJ8H"
      },
      "outputs": [],
      "source": [
        "decoded = tf.keras.backend.ctc_decode(yhat, input_length=[75], greedy=True)[0][0].numpy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 123,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kDNbNKK4yML5",
        "outputId": "9a6260a3-7be3-4517-81b1-b586ed860c99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PREDICTIONS\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<tf.Tensor: shape=(), dtype=string, numpy=b'le '>]"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ],
      "source": [
        "print('~'*100, 'PREDICTIONS')\n",
        "[tf.strings.reduce_join([num_to_char(word) for word in sentence]) for sentence in decoded]"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "mount_file_id": "14pfR61BfX92kYCna6yciCHILodQbPHuX",
      "authorship_tag": "ABX9TyMQetqgJd2hU6oSzwVY/09J",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
